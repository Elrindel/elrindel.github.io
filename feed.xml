<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elrindel/Flob Blog</title>
    <description>Mes projets</description>
    <link>https://elrindel.github.io/</link>
    <atom:link href="https://elrindel.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jul 2022 18:23:49 +0200</pubDate>
    <lastBuildDate>Wed, 06 Jul 2022 18:23:49 +0200</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>Utiliser un Arduino sans code Arduino : ATmega328P</title>
        <description>&lt;p&gt;Vous avez probablement déjà entendu parler d’&lt;strong&gt;Arduino&lt;/strong&gt;, au moins en tant que &lt;strong&gt;carte électronique programmable&lt;/strong&gt; pour bidouilleur (d’ailleurs j’en ai utilisé dans mes précédents articles).&lt;br /&gt;
Si vous connaissez déjà ces cartes c’est bien, si vous avez déjà testé un petit &lt;strong&gt;programme Arduino&lt;/strong&gt; c’est mieux !!&lt;/p&gt;

&lt;p&gt;En effet, cet article n’a pas pour objectif de vous présenter ni de vous initier à l’&lt;strong&gt;Arduino&lt;/strong&gt;, mais plutôt d’explorer différentes façons d’écrire du code et voir quels sont les avantages et inconvénients de l’&lt;strong&gt;environnement Arduino&lt;/strong&gt;, et surtout comment &lt;strong&gt;créer des programmes Arduino sans code Arduino&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Arduino&lt;/strong&gt; ce n’est pas seulement des &lt;strong&gt;cartes électroniques programmables&lt;/strong&gt;, c’est aussi un &lt;strong&gt;IDE&lt;/strong&gt; et surtout un &lt;strong&gt;framework&lt;/strong&gt;, le tout &lt;strong&gt;open-source&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;Ce &lt;strong&gt;framework&lt;/strong&gt; est sujet à débat … certains lui reprochent de trop simplifier la programmation des &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; &lt;em&gt;(microcontrôleurs)&lt;/em&gt;, ce qui rend le programme plus lourd (en terme de mémoire et d’exécution), pas optimisé et “limite certaines possibilités”.&lt;br /&gt;
Enfin, ce sont les principaux arguments qu’on retrouve contre ce &lt;strong&gt;framework&lt;/strong&gt;, mais nous allons voir que malgré ces points négatifs, il y a aussi du positif et ce n’est pas négligeable !&lt;/p&gt;

&lt;p&gt;Concernant l’&lt;strong&gt;IDE Arduino&lt;/strong&gt;, tout le monde semble plus ou moins d’accord sur le fait que cet environnement de développement est totalement dépassé !&lt;br /&gt;
C’est un véritable calvaire de coder dans cet &lt;strong&gt;IDE&lt;/strong&gt;, même si c’est toujours mieux que le vieux notepad natif de Windows … (ouai bon, j’exagère un peu, c’est pas bien compliqué de faire mieux que ce vieux notepad ^^).&lt;br /&gt;
&lt;em&gt;A l’heure actuelle, ils travaillent sur une nouvelle version de l’IDE Arduino (version 2.0 dispo en beta). Même si elle semble bien mieux que la première version, il semblerait qu’elle ne soit pas encore prête à remplacer un véritable IDE.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;cest-quoi-un-microcontrôleur-&quot;&gt;C’est quoi un microcontrôleur ?&lt;/h3&gt;

&lt;p&gt;Si vous n’êtes pas déjà familier avec les cartes électroniques programmables, il est possible que vous ne saisissiez pas bien ce qu’est un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; &lt;em&gt;(microcontrôleurs)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sans rentrer dans les détails, un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; est une puce électronique qui contient tous les éléments (ou presque) nécessaires à l’exécution d’un code et à la manipulation d’entrées/sorties et/ou l’utilisation de certains périphériques (DAC/ADC, liaison série, timer etc…).&lt;/p&gt;

&lt;p&gt;Chaque modèle de carte électronique programmable est basé sur un modèle de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; (dans certains cas, suivant la version d’une carte on peut trouver un µC légèrement différent).&lt;/p&gt;

&lt;p&gt;Par exemple, le très célèbre &lt;strong&gt;Arduino UNO&lt;/strong&gt; utilise le non moins célèbre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; &lt;strong&gt;ATmega328&lt;/strong&gt; (tout comme l’&lt;strong&gt;Arduino Nano&lt;/strong&gt;, mais ce dernier existe aussi avec un &lt;strong&gt;ATmega168&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Ces cartes contiennent généralement assez peu de composants.&lt;br /&gt;
Une grande partie des &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; ont uniquement besoin d’une alimentation pour fonctionner. D’autres vont également avoir besoin d’un oscillateur externe, voir même d’une mémoire externe (ou plusieurs), puis suivant les périphériques présents dans le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; on peut avoir besoin d’autres composants comme une antenne par exemple …&lt;/p&gt;

&lt;p&gt;Le rôle principal de ce genre de carte est donc de faciliter les connexions, ce sont des cartes de développement qui permettent de réaliser des tests facilement et rapidement, notamment en intégrant (généralement) une interface USB pour programmer facilement le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; (la partie USB est gérée soit par une puce dédiée sur la carte, soit par le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; directement si il est compatible avec cette fonctionnalité).&lt;br /&gt;
Mais on pourrait très bien utiliser le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; en dehors de sa carte en lui apportant le minimum de composants requis pour qu’il fonctionne (donc pas grand chose).&lt;/p&gt;

&lt;h2 id=&quot;concept-de-lide-arduino&quot;&gt;Concept de l’IDE Arduino&lt;/h2&gt;

&lt;p&gt;Malgré ses défauts, cet &lt;strong&gt;environnement de développement Arduino&lt;/strong&gt; a l’avantage de simplifier énormément la compilation et le transfert des programmes pour toutes les cartes compatibles &lt;strong&gt;Arduino&lt;/strong&gt; grâce à un gestionnaire de librairies très facile à utiliser ainsi qu’un gestionnaire de cartes qui permet d’ajouter de nouvelles cartes et/ou de nouvelles options pour certaines cartes.&lt;/p&gt;

&lt;p&gt;En quelques cliques on peut donc compiler et téléverser &lt;em&gt;(hmm, alors, cette traduction est aussi sujet à débat, mais c’est la traduction officielle …)&lt;/em&gt; le programme sur une carte gérée par l’&lt;strong&gt;IDE&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Heureusement, vous pouvez éditer votre code dans votre éditeur favori puis utiliser l’&lt;strong&gt;IDE Arduino&lt;/strong&gt; uniquement pour la compilation et la programmation de votre carte.&lt;/p&gt;

&lt;p&gt;Il existe évidemment d’autres alternatives pour ne pas utiliser l’&lt;strong&gt;IDE Arduino&lt;/strong&gt;, comme &lt;strong&gt;PlatformIO&lt;/strong&gt;, mais je ne vais pas traiter ce sujet ici.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dans cet article nous verrons comment nous passer du framework et de l’IDE Arduino en utilisant directement les outils AVR (voir dans les prochains chapitres) !&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;concept-du-framework-arduino&quot;&gt;Concept du framework Arduino&lt;/h2&gt;

&lt;p&gt;Le &lt;strong&gt;framework Arduino&lt;/strong&gt; a pour objectif de rendre facilement accessible la programmation d’un certain nombre de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt;, mais aussi de rendre compatible le code pour une grande partie des &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; compatibles Arduino&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En effet, chaque modèle de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; a ses propres caractéristiques/spécificités, notamment au niveau de la répartition des GPIO et des adresses mémoire à utiliser pour atteindre ces GPIO ainsi que les différents périphériques du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt;.&lt;br /&gt;
En utilisant le framework, inutile d’aller lire la documentation du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; pour savoir quelle adresse mémoire (ou registre) utiliser etc…, c’est le framework qui gère tout ça pour nous !&lt;/p&gt;

&lt;p&gt;Cela permet donc d’avoir un code identique pour une grande partie des &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; compatibles Arduino.&lt;br /&gt;
Ce qui est un sacré avantage pour l’apprentissage et pour le partage !&lt;/p&gt;

&lt;p&gt;Evidemment, si vous partagez un code qui utilise 50 GPIO d’un &lt;strong&gt;Arduino Mega&lt;/strong&gt; … vous ne pourrez pas l’utiliser directement sur un &lt;strong&gt;Arduino UNO&lt;/strong&gt; (qui possède seulement 20 GPIO).&lt;br /&gt;
Le framework n’est pas magique, il ne va pas créer ce qui n’existe pas … (pour certaines fonctionnalités ou certains périphériques il peut proposer une solution software quand c’est possible).&lt;/p&gt;

&lt;h2 id=&quot;comparaison-dun-code-arduino-avec-et-sans-framework&quot;&gt;Comparaison d’un code Arduino avec et sans framework&lt;/h2&gt;

&lt;p&gt;J’ai hésité à faire des benchmark pour comparer les performances d’un “même” code avec et sans framework mais ça impliquerait de rentrer beaucoup plus dans les détails de tout un tas de fonctionnalités et ça ferait un article interminable … (peut-être pour un prochain article)&lt;br /&gt;
Donc pour simplifier la comparaison, je me suis limité à comparer la taille des binaires (la quantité de mémoire flash utilisée pour stocker le programme dans le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Quand on parle de programme de test sur un &lt;strong&gt;Arduino&lt;/strong&gt;, le plus populaire est sans conteste le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blink&lt;/code&gt; qui permet tout simplement de faire clignoter une LED à intervalle régulier.&lt;br /&gt;
Généralement, les cartes &lt;strong&gt;Arduino&lt;/strong&gt; ont une LED intégrée sur la carte, ce qui permet de tester directement sans aucun branchement autre que l’alimentation.&lt;/p&gt;

&lt;p&gt;On va voir ci-dessous différentes façons de réaliser ce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blink&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;J’utilise un Arduino UNO pour ce programme de test ! C’est donc un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; ATmega328 (processeur AVR, donc utilisation de la lib et des outils AVR).&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;1---code-arduino-compilateur-ide-arduino&quot;&gt;1 - Code Arduino, Compilateur IDE Arduino&lt;/h3&gt;

&lt;p&gt;Le code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blink&lt;/code&gt; officiel :&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pinMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mémoire utilisée :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;924 octets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compatibilité :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Toutes les cartes compatibles Arduino&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Certaines cartes n’ont pas de LED intégrée, auquel cas il faut l’ajouter pour le test.&lt;/p&gt;

&lt;h3 id=&quot;2---code-arduino-optimisé-1-compilateur-ide-arduino&quot;&gt;2 - Code Arduino optimisé 1, Compilateur IDE Arduino&lt;/h3&gt;

&lt;p&gt;Première optimisation en remplaçant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delay&lt;/code&gt; du &lt;strong&gt;framework Arduino&lt;/strong&gt; par &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_delay_ms&lt;/code&gt; de la &lt;strong&gt;lib AVR&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pinMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUTPUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;digitalWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LED_BUILTIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mémoire utilisée :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;770 octets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compatibilité :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cartes Arduino basées sur un µC AVR&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;Et éventuellement d’autres si la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_delay_ms&lt;/code&gt; existe dans la lib du µC en question.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;154 octets&lt;/code&gt; de gagnés juste en utilisant une autre fonction de délais, mais au détriment d’une compatibilité limitée aux µC AVR.&lt;/p&gt;

&lt;h3 id=&quot;3---code-arduino-optimisé-2-compilateur-ide-arduino&quot;&gt;3 - Code Arduino optimisé 2, Compilateur IDE Arduino&lt;/h3&gt;

&lt;p&gt;Seconde optimisation en utilisant directement les registres pour configurer et manipuler le GPIO &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LED_BUILTIN&lt;/code&gt; (qui correspond au GPIO 13) :&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DDRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b11011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mémoire utilisée :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;488 octets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compatibilité :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cartes Arduino basées sur un µC AVR et dont le bit 5 du registre B correspond bien au bon GPIO&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;Parmi les cartes Arduino officielles les plus connues, les suivantes son compatibles : Duemilanove, Mini, Nano, Pro Mini, Uno&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pour déterminer le registre et le bit à utiliser, soit il faut lire le datasheet du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt;, soit il faut regarder le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pinout de la carte&lt;/code&gt; et/ou celui du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; (&lt;strong&gt;pinout arduino uno&lt;/strong&gt; dans une recherche d’images).&lt;br /&gt;
Dans le cas présent, on constate que le GPIO 13 est sur le port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PB5&lt;/code&gt;, ce qui correspond au port/registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; et au bit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;L’utilisation des registres permet, dans le cas présent, d’économiser &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;282 octets&lt;/code&gt; !&lt;br /&gt;
Cependant, les registres dépendent des µC … comme évoqué précédemment, d’un modèle de µC à un autre, les GPIO et autres périphériques sont généralement attribués à des adresses/registres/ports différents.&lt;/p&gt;

&lt;p&gt;Mais il y a au moins deux gros avantages à utiliser les registres :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Au niveau des performances c’est le top, on ne pourra pas faire mieux (et comparé aux fonctions du framework c’est un gain énorme en performance)&lt;/li&gt;
  &lt;li&gt;On peut manipuler plusieurs GPIO d’un coup ! Dans le cas présent on peut manipuler 8 GPIO d’un coup (sur un ESP32 on peut manipuler 32 GPIO d’un coup)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;4---code-avec-lib-avr-uniquement-compilateur-ide-arduino&quot;&gt;4 - Code avec lib AVR uniquement, Compilateur IDE Arduino&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DDRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b11011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mémoire utilisée :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;178 octets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compatibilité :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Même compatibilité que le code précédent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Les fonctions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loop&lt;/code&gt; font partie du &lt;strong&gt;framework Arduino&lt;/strong&gt;, mais derrière ces deux fonctions il y a un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;En réécrivant la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; on gagne &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;310 octets&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;Cet écart est principalement lié à l’appel de la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; qui est exécuté au début du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; du framework.&lt;br /&gt;
Cette fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; permet d’activer les interruptions et de paramétrer les registres des timers et de l’ADC.&lt;br /&gt;
Pour notre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blink&lt;/code&gt; on peut s’en passer, mais si le programme a besoin d’utiliser certaines de ces fonctionnalités alors il faudra s’assurer qu’ils sont bien paramétrés.&lt;/p&gt;

&lt;h3 id=&quot;5---code-avec-lib-avr-uniquement-compilateur-avr-gcc&quot;&gt;5 - Code avec lib AVR uniquement, Compilateur avr-gcc&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define F_CPU 16000000UL
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;avr/io.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;util/delay.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DDRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b11011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mémoire utilisée :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;178 octets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compatibilité :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Même compatibilité que le code précédent MAIS il faut indiquer la fréquence de fonctionnement du µC !&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;Dans le cas présent, le fait de définir une mauvaise fréquence ne devrait pas bloquer le programme, mais la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_delay_ms&lt;/code&gt; ne sera pas cohérente.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Exactement le même poids qu’avec le code précédent, et c’est parfaitement normal puisqu’il s’agit du même code mais avec les instructions nécessaires à la compilation en dehors de l’&lt;strong&gt;IDE Arduino&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;6---code-sans-framework-et-sans-lib-compilateur-avr-gcc&quot;&gt;6 - Code sans framework et sans lib, Compilateur avr-gcc&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define F_CPU 16000000UL
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define DDRB (*(volatile uint8_t *)(0x24))
#define PORTB (*(volatile uint8_t *)(0x25))
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_delay_loop_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__asm__&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;1: sbiw %0,1&quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;brne 1b&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=w&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_CPU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__ticks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65535&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__ticks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__ticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_delay_loop_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_CPU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;__ticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__ticks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_delay_loop_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__ticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DDRB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b00100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PORTB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;mb&quot;&gt;0b11011111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_delay_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mémoire utilisée :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;174 octets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compatibilité :&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Même compatibilité que le code précédent&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;J’ai simplement copié une partie de la fonction de la lib AVR pour gérer le délais. Il y a aucun intérêt à faire ça mais c’était pour montrer cette possibilité.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Vous en conviendrez, le gain de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 octets&lt;/code&gt; ne justifie clairement pas de faire ce genre de code.&lt;/p&gt;

&lt;h3 id=&quot;récapitulatif&quot;&gt;Récapitulatif&lt;/h3&gt;

&lt;table class=&quot;small&quot;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th&gt;Lib&lt;/th&gt;
            &lt;th&gt;Compilateur&lt;/th&gt;
            &lt;th&gt;Mémoire (octets)&lt;/th&gt;
            &lt;th&gt;Compatibilité&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code 1&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Arduino&lt;/td&gt;
            &lt;td&gt;IDE Arduino&lt;/td&gt;
            &lt;td&gt;924&lt;/td&gt;
            &lt;td&gt;Arduino&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code 2&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Arduino + AVR&lt;/td&gt;
            &lt;td&gt;IDE Arduino&lt;/td&gt;
            &lt;td&gt;770&lt;/td&gt;
            &lt;td&gt;µC AVR&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code 3&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Arduino + AVR&lt;/td&gt;
            &lt;td&gt;IDE Arduino&lt;/td&gt;
            &lt;td&gt;488&lt;/td&gt;
            &lt;td&gt;µC AVR avec les mêmes registres&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code 4&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;AVR&lt;/td&gt;
            &lt;td&gt;IDE Arduino&lt;/td&gt;
            &lt;td&gt;178&lt;/td&gt;
            &lt;td&gt;µC AVR avec les mêmes registres&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code 5&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;AVR&lt;/td&gt;
            &lt;td&gt;avr-gcc&lt;/td&gt;
            &lt;td&gt;178&lt;/td&gt;
            &lt;td&gt;µC AVR avec les mêmes registres&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Code 6&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;-&lt;/td&gt;
            &lt;td&gt;avr-gcc&lt;/td&gt;
            &lt;td&gt;174&lt;/td&gt;
            &lt;td&gt;µC AVR avec les mêmes registres&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Dès qu’on utilise des éléments de la &lt;strong&gt;lib AVR&lt;/strong&gt; on se retrouve limité aux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC AVR&lt;/code&gt;, et dès qu’on utilise des éléments spécifiques à un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; (comme les registres) on restreint encore plus la compatibilité du code.&lt;/p&gt;

&lt;p&gt;L’&lt;strong&gt;IDE Arduino&lt;/strong&gt; utilise également &lt;strong&gt;avr-gcc&lt;/strong&gt; pour les cartes basées sur un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC AVR&lt;/code&gt;, mais il va automatiquement inclure son &lt;strong&gt;framework&lt;/strong&gt; ainsi qu’une grande partie de la &lt;strong&gt;lib AVR&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;C’est pour cela que les codes compilés dans l’&lt;strong&gt;IDE Arduino&lt;/strong&gt; n’ont pas besoin d’include pour utiliser les fonctionnalités du &lt;strong&gt;framework&lt;/strong&gt; et une grande partie des fonctionnalités de la &lt;strong&gt;lib AVR&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pour compiler avec &lt;strong&gt;avr-gcc&lt;/strong&gt; j’ai utilisé exactement les mêmes options que l’&lt;strong&gt;IDE Arduino&lt;/strong&gt; (sans forcément chercher à quoi elles servent), le but n’étant pas de voir si les options de compilation sont réellement optimales mais plutôt de comparer le résultat final avec les même options compilation.&lt;/p&gt;

&lt;p&gt;Voici les commandes pour compiler et récupérer le binaire :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;avr-gcc &lt;span class=&quot;nt&quot;&gt;-Wall&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wextra&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Os&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-flto&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fuse-linker-plugin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wl&lt;/span&gt;,--gc-sections &lt;span class=&quot;nt&quot;&gt;-mmcu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;atmega328p blink.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; blink.elf
avr-objcopy &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; binary blink.elf blink.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Et la commande pour programmer votre Arduino :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;avrdude &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; arduino &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; m328p &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; COMX &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 115200 &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; flash:w:blink.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Evidemment il faut remplacer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COMX&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/ttySX&lt;/code&gt; sous linux) par le bon port série.&lt;br /&gt;
Si votre Arduino possède un ancien bootloader, vous devrez passer en baudrate 57600 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-b 57600&lt;/code&gt;) au lieu de 115200.&lt;br /&gt;
Au besoin, adaptez également l’option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; pour correspondre à votre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; (pour obtenir la liste, tapez cette commande : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;avrdude -c avrisp&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;La différence de poids peut sembler énorme, et elle l’est pour un simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blink&lt;/code&gt; !&lt;br /&gt;
Mais sur un programme bien plus gros, la différence de poids serait beaucoup moins impressionnante.&lt;/p&gt;

&lt;p&gt;Certes on gagnera toujours de l’espace en limitant l’utilisation des &lt;strong&gt;fonctions Arduino&lt;/strong&gt;, mais toujours au détriment de la compatibilité entre les différents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Et comme évoqué précédemment, il y a aussi les performances qui rentrent en jeu !&lt;br /&gt;
L’utilisation des registres permet vraiment un gros gain, autant en poids qu’en performance.&lt;/p&gt;

&lt;p&gt;Suivant les contraintes de votre projet vous n’aurez peut-être pas le choix, si vous avez besoin d’optimiser au maximum les performances, et éventuellement la mémoire nécessaire, alors il faudra abandonner le &lt;strong&gt;framework Arduino&lt;/strong&gt; et donc abandonner la compatibilité Arduino.&lt;/p&gt;

&lt;p&gt;Quoi qu’il en soit, pour débuter avec les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt;, le &lt;strong&gt;framework Arduino&lt;/strong&gt; est vraiment très bien conçu !&lt;br /&gt;
Pour partager son projet avec un maximum de personnes et surtout permettre de réutiliser votre code facilement, il est également très intéressant d’utiliser ce framework.&lt;/p&gt;

&lt;p&gt;C’est donc des choix à faire … ça va dépendre de votre projet, de votre cible et de vos préférences.&lt;/p&gt;

&lt;p&gt;Evidemment, il existe aussi des &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;µC&lt;/code&gt; qui ne sont pas compatibles Arduino, il y a un choix énorme dans ce domaine.&lt;br /&gt;
Si c’est pour une utilisation pro, je pense que vous ne devriez même pas vous demander si il faut utiliser ou non le &lt;strong&gt;framework Arduino&lt;/strong&gt; …&lt;br /&gt;
Pour moi l’utilisation d’&lt;strong&gt;Arduino&lt;/strong&gt; est essentiellement pour l’apprentissage, le partage et le bidouillage !&lt;/p&gt;

&lt;p&gt;Donc pour terminer, j’estime qu’il est inacceptable de cracher sur le &lt;strong&gt;framework Arduino&lt;/strong&gt; (malgré ses points négatifs), et je pense que ceux qui le font n’ont pas la bonne approche.&lt;br /&gt;
Grâce à Arduino, l’électronique et la programmation embarquée se démocratisent de plus en plus et sont désormais très abordables pour tout le monde !&lt;/p&gt;

&lt;h2 id=&quot;sources-et-inspirations&quot;&gt;Sources et inspirations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arduino.cc/&quot; target=&quot;_blank&quot;&gt;Arduino&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microchip.com/en-us/development-tools-tools-and-software/gcc-compilers-avr-and-arm&quot; target=&quot;_blank&quot;&gt;AVR Toolchain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 25 Jun 2021 22:27:52 +0200</pubDate>
        <link>https://elrindel.github.io/utiliser-arduino-sans-code-arduino-atmega328p</link>
        <guid isPermaLink="true">https://elrindel.github.io/utiliser-arduino-sans-code-arduino-atmega328p</guid>
        
        
        <category>Arduino</category>
        
      </item>
    
      <item>
        <title>Fabrication d'une cartouche GameBoy programmable pas cher</title>
        <description>&lt;p&gt;Tester ses programmes dans un émulateur c’est bien, mais tester sur une véritable GameBoy c’est carrément mieux.&lt;/p&gt;

&lt;p&gt;Pour cela, l’unique solution consiste à avoir une &lt;strong&gt;cartouche GameBoy programmable&lt;/strong&gt;.&lt;br /&gt;
On en trouve facilement sur internet, avec une interface USB ou un slot SD, avec ou sans RTC etc… mais il faut avouer que les prix ne sont pas très attractifs !&lt;/p&gt;

&lt;p&gt;Lors de mes recherches pour me procurer une telle cartouche, je suis tombé sur des articles de &lt;strong&gt;fabrication de cartouche GB DIY&lt;/strong&gt;, il m’en fallait pas plus pour me motiver à faire ma propre cartouche.&lt;/p&gt;

&lt;p&gt;Plusieurs méthodes de conception sont possibles, de la modification d’une véritable cartouche à la création complète d’une cartouche totalement custom.&lt;br /&gt;
J’ai évidemment choisi l’option la plus simple (et la moins onéreuse), c’est à dire sacrifier une cartouche de jeu pour la rendre programmable !&lt;/p&gt;

&lt;h2 id=&quot;modifications-à-apporter-à-une-cartouche-gb-afin-de-la-rendre-programmable&quot;&gt;Modifications à apporter à une cartouche GB afin de la rendre programmable&lt;/h2&gt;

&lt;p&gt;Toutes les cartouches GB possèdent une mémoire qui contient le programme/jeu, mais cette mémoire ne peut pas être re-écrite (voir ci-dessous).&lt;/p&gt;

&lt;p&gt;L’objectif va donc être de remplacer cette mémoire afin d’en mettre une qu’on pourra re-écrire facilement !&lt;/p&gt;

&lt;h3 id=&quot;mémoire-rom-vs-flash&quot;&gt;Mémoire ROM vs Flash&lt;/h3&gt;

&lt;p&gt;Pour être plus exact on devrait comparer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt; &lt;em&gt;(&lt;strong&gt;R&lt;/strong&gt;ead-&lt;strong&gt;O&lt;/strong&gt;nly &lt;strong&gt;M&lt;/strong&gt;emory)&lt;/em&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EEPROM&lt;/code&gt; &lt;em&gt;(&lt;strong&gt;E&lt;/strong&gt;lectrically-&lt;strong&gt;E&lt;/strong&gt;rasable &lt;strong&gt;P&lt;/strong&gt;rogrammable &lt;strong&gt;R&lt;/strong&gt;ead-&lt;strong&gt;O&lt;/strong&gt;nly &lt;strong&gt;M&lt;/strong&gt;emory)&lt;/em&gt;, la mémoire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flash&lt;/code&gt; étant un type d’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EEPROM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Les cartouches sont équipées d’une mémoire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt;. Comme le nom l’indique, il s’agit d’une mémoire accessible &lt;strong&gt;uniquement en lecture&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La mémoire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flash&lt;/code&gt;, vous la connaissez probablement déjà puisqu’on la retrouve dans tout un tas de périphériques/objets comme les clés USB, cartes SD, disques SSD etc…&lt;br /&gt;
Evidemment, cette mémoire permet un accès en lecture et en écriture.&lt;/p&gt;

&lt;p&gt;Il existe différents types de &lt;strong&gt;boitier (package)&lt;/strong&gt; pour toutes ces mémoires, mais dans les cartouches GB on va quasiment toujours trouver du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOIC&lt;/code&gt; ou du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOP&lt;/code&gt; (il s’agit de deux formats de montage en surface très similaires), généralement avec &lt;strong&gt;32 broches&lt;/strong&gt; mais aussi avec &lt;strong&gt;44 broches&lt;/strong&gt; pour les mémoires de &lt;strong&gt;2Mo&lt;/strong&gt; et &lt;strong&gt;4Mo&lt;/strong&gt;.&lt;br /&gt;
Dans le cas des cartouches GB, l’accès aux données est fait via une interface parallèle, c’est à dire qu’il y a un certain nombre d’entrées qui représentent l’adresse mémoire à atteindre (en binaire), et &lt;strong&gt;8 sorties&lt;/strong&gt; qui prendront la valeur présente à l’adresse mémoire demandée (toujours en binaire, donc &lt;strong&gt;1 octet&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Si vous avez déjà lu mon précédent article, vous savez déjà cela, sinon vous pouvez aller le lire : &lt;a href=&quot;programmateur-eeprom-diy-arduino&quot; target=&quot;_blank&quot;&gt;Programmer une mémoire Flash (EEPROM) 32 broches avec un Arduino&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pour des boitiers équivalents, il s’avère que la répartition des broches des mémoires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flash&lt;/code&gt; est très similaire à celle des mémoires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt; (voir le chapitre sur le &lt;strong&gt;remplacement de la ROM&lt;/strong&gt; pour tous les détails).&lt;br /&gt;
De plus, on trouve des mémoires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flash&lt;/code&gt; avec des caractéristiques très proches des &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt; en terme de rapidité de lecture. Le tout étant d’avoir une mémoire au moins aussi rapide que la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt; présente dans la cartouche.&lt;/p&gt;

&lt;p&gt;Vous l’aurez compris, on va donc remplacer la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt; par une mémoire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flash&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;Pour le moment je vais faire en sorte de pouvoir extraire facilement la mémoire afin de la programmer avec mon &lt;a href=&quot;programmateur-eeprom-diy-arduino&quot; target=&quot;_blank&quot;&gt;programmateur fait maison à base d’Arduino&lt;/a&gt;.&lt;br /&gt;
J’ai donc choisi de me limiter aux boitiers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLCC&lt;/code&gt; qui ont le défaut d’être assez volumineux (surtout le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP&lt;/code&gt;) mais l’avantage d’être facilement manipulables en utilisant un &lt;strong&gt;socket&lt;/strong&gt; adapté.&lt;/p&gt;

&lt;h2 id=&quot;choisir-la-bonne-cartouche-pour-remplacer-sa-mémoire-rom&quot;&gt;Choisir la bonne cartouche pour remplacer sa mémoire ROM&lt;/h2&gt;

&lt;p&gt;Comme dit ci-dessus, toutes les cartouches ont une &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt;, mais il est important de vérifier que le type de boitier est bien du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOIC&lt;/code&gt; ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOP&lt;/code&gt; (ou un autre type que vous pourrez dessouder avec un simple fer).&lt;br /&gt;
Ceci dit, les cartouches qui n’ont pas ces types de boitier sont assez rares.&lt;/p&gt;

&lt;p&gt;Maintenant il faut voir quels sont vos besoins. Avez-vous besoin de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt; et/ou du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTC&lt;/code&gt; ? Quelle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quantité de mémoire&lt;/code&gt; souhaitez vous avoir ?&lt;/p&gt;

&lt;p&gt;Afin de faciliter les recherches, je me suis permis de regrouper deux bases de données que j’ai trouvé sur internet afin de centraliser les infos et avoir un formulaire de recherche efficace et complet (ce que ne proposent pas les sources en question).&lt;br /&gt;
Voici donc ma version : &lt;a href=&quot;https://gb.flob.ovh/&quot; target=&quot;_blank&quot;&gt;Game Boy Cartridges&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evidemment, si vous souhaitez charger un jeu qui utilise de la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt; et/ou le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTC&lt;/code&gt; il faudra que votre &lt;strong&gt;cartouche programmable&lt;/strong&gt; possède ces éléments. C’est pourquoi il est préférable de bien sélectionner votre cartouche !&lt;/p&gt;

&lt;h3 id=&quot;cartouches-avec-le-rtc&quot;&gt;Cartouches avec le RTC&lt;/h3&gt;

&lt;p&gt;Pour ce qui est du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTC&lt;/code&gt;, excepté si vous voulez sacrifier une cartouche Pokémon (à partir de la seconde génération), vous risquez d’avoir un peu de mal à trouver votre bonheur.&lt;/p&gt;

&lt;p&gt;Vous pouvez utiliser mon formulaire de recherche avec l’option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTC&lt;/code&gt; pour trouver les jeux avec cette fonctionnalité. 
&lt;em&gt;Si vous souhaitez acheter une telle cartouche, faites attention à la version (release), si elle ne correspond pas exactement alors il n’y a probablement pas le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTC&lt;/code&gt; !&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;cartouches-avec-de-la-ram&quot;&gt;Cartouches avec de la RAM&lt;/h3&gt;

&lt;p&gt;Concernant la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt;, là vous aurez beaucoup de choix ! Le mieux étant d’ouvrir vos cartouches pour vérifier ce qu’elles ont dans le ventre.&lt;/p&gt;

&lt;p&gt;Si votre cartouche possède de la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt;, il faudra vérifier la référence de celle-ci afin de savoir sa taille.&lt;/p&gt;

&lt;p&gt;La quantité maximale de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt; qu’un jeu peut exploiter est de &lt;strong&gt;128Ko&lt;/strong&gt; avec un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MBC5&lt;/code&gt; (voir ci-dessous pour plus d’informations).&lt;/p&gt;

&lt;h3 id=&quot;quantité-de-mémoire-max&quot;&gt;Quantité de mémoire max&lt;/h3&gt;

&lt;p&gt;Pour la quantité de mémoire, les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROM&lt;/code&gt; vont de &lt;strong&gt;32Ko&lt;/strong&gt; à &lt;strong&gt;8Mo&lt;/strong&gt; mais il faut surtout regarder le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mapper&lt;/code&gt; présent sur la cartouche.&lt;/p&gt;

&lt;p&gt;Le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mapper&lt;/code&gt; est optionnel et la taille maximale de la mémoire dépend de lui (idem pour la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt;), voici la liste des mémoires max gérées par les différents &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mapper&lt;/code&gt; :&lt;/p&gt;

&lt;table class=&quot;small&quot;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Mapper&lt;/th&gt;
            &lt;th&gt;ROM&lt;/th&gt;
            &lt;th&gt;RAM&lt;/th&gt;
            &lt;th&gt;RTC&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;32Ko&lt;/td&gt;
            &lt;td&gt;Non&lt;/td&gt;
            &lt;td&gt;Non&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MBC1&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;2Mo&lt;/td&gt;
            &lt;td&gt;32Ko&lt;/td&gt;
            &lt;td&gt;Non&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MBC2&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;256Ko&lt;/td&gt;
            &lt;td&gt;512x4 bits&lt;/td&gt;
            &lt;td&gt;Non&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MBC3&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;2Mo&lt;/td&gt;
            &lt;td&gt;32Ko&lt;/td&gt;
            &lt;td&gt;Oui&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MBC30&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;4Mo&lt;/td&gt;
            &lt;td&gt;64Ko&lt;/td&gt;
            &lt;td&gt;Oui&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MBC5&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;8Mo&lt;/td&gt;
            &lt;td&gt;128Ko&lt;/td&gt;
            &lt;td&gt;Non&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Il existe d’autres types de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mapper&lt;/code&gt; mais ils sont bien plus rares. Les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mapper&lt;/code&gt; de type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HuC&lt;/code&gt; sont similaires aux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MBC&lt;/code&gt; de même numéro.&lt;br /&gt;
&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MBC&lt;/code&gt; signifie &lt;strong&gt;M&lt;/strong&gt;emory &lt;strong&gt;B&lt;/strong&gt;ank &lt;strong&gt;C&lt;/strong&gt;ontroller&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Qui peut le plus peut le moins, et heureusement puisqu’il semble impossible de trouver des mémoires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flash&lt;/code&gt; de plus de &lt;strong&gt;512Ko&lt;/strong&gt; en boitier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP&lt;/code&gt; ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLCC&lt;/code&gt; et fonctionnant sous une tension de &lt;strong&gt;5V&lt;/strong&gt; … (enfin, ça existe mais à 40$ pour 1Mo ça va pas le faire).&lt;/p&gt;

&lt;p&gt;Personnellement j’ai des mémoires de &lt;strong&gt;512Ko&lt;/strong&gt;, je vais donc me limiter aux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mapper&lt;/code&gt; 1, 3 et 5 (ce sont clairement les plus répandus ^^).&lt;/p&gt;

&lt;p&gt;Pour dépasser les &lt;strong&gt;512Ko&lt;/strong&gt;, il faudrait donc passer sur des boitiers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TSOP&lt;/code&gt; ! Ce qui impliquerait de passer directement par la cartouche pour programmer la mémoire puisque les sockets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TSOP&lt;/code&gt; sont vraiment très volumineux et qu’il faudrait donc souder la mémoire flash dans la cartouche. Ca sera très certainement une évolution de ce projet, et donc un futur article :)&lt;br /&gt;
Pour le moment, je vais me contenter d’un bon vieux socket &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt; avec une mémoire flash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SST39SF040&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Quoi qu’il en soit, l’objectif ici n’est pas de faire tourner tous les jeux GB existants, &lt;strong&gt;512Ko&lt;/strong&gt; ça sera largement suffisant pour tester mes propres programmes !&lt;/p&gt;

&lt;h2 id=&quot;matérieloutilscomposants-requis-pour-faire-votre-cartouche-programmable&quot;&gt;Matériel/Outils/Composants requis pour faire votre cartouche programmable&lt;/h2&gt;

&lt;p&gt;Pour commencer, il est préférable de vous procurer un tournevis (ou embout) &lt;strong&gt;3.8MM Security Bit&lt;/strong&gt; afin d’ouvrir les cartouches GB sans faire de dégâts et sans galérer.&lt;/p&gt;

&lt;p&gt;Ensuite il vous faudra un bon &lt;strong&gt;fer à souder&lt;/strong&gt;.&lt;br /&gt;
Personnellement j’ai un &lt;strong&gt;TS100&lt;/strong&gt; et je le recommande, il est vraiment top !&lt;br /&gt;
Et évidemment l’étain qui va bien avec éventuellement un peu de flux pour simplifier les soudures (en réalité il faudrait parler de &lt;strong&gt;brasage&lt;/strong&gt; et non de &lt;strong&gt;soudure&lt;/strong&gt;, mais on va pas se prendre la tête avec ça).&lt;/p&gt;

&lt;p&gt;Comme vu précédemment, il faut un socket &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt; ! Pour être exact, il faut un socket &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32-Wide&lt;/code&gt; qui correspond bien à la largeur de la puce mémoire.&lt;br /&gt;
En effet, on retrouve deux largeurs dans les boitiers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP&lt;/code&gt;, &lt;strong&gt;7.62mm&lt;/strong&gt; (0.3”) et &lt;strong&gt;15.24mm&lt;/strong&gt; (0.6”).&lt;br /&gt;
Il faut donc sélectionner le bon socket, en l’occurrence &lt;strong&gt;15.24mm (Wide)&lt;/strong&gt;.&lt;br /&gt;
&lt;em&gt;Ceci dit, à partir du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt; il semble assez rare de trouver du &lt;strong&gt;7.62mm&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pour insérer ce socket dans la cartouche GB vous avez en gros deux possibilités :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Utiliser un petit circuit imprimé coupé aux bonnes dimensions pour bien se caler dans la cartouche&lt;/li&gt;
  &lt;li&gt;Laisser le socket en l’air et éventuellement tenter de le caler dans la cartouche&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dans les deux cas il faudra faire très attention à ne pas avoir de faux contact ou de court-circuit en positionnant le socket par dessus le circuit imprimé de la cartouche (vous pouvez utiliser par exemple un isolant comme du scotch d’électricien).&lt;/p&gt;

&lt;p&gt;Personnellement j’ai ce qu’il faut pour faire un circuit imprimé à une face, c’est largement suffisant pour y souder le socket et faire les raccordements nécessaires.&lt;br /&gt;
Donc j’ai choisi la solution 1.&lt;/p&gt;

&lt;p&gt;Alors évidemment le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt; est bien trop épais pour rentrer incognito dans une cartouche GB …&lt;br /&gt;
L’emplacement est donc vite vu puisqu’il peut rentrer qu’à un seul endroit, c’est à dire en haut de la cartouche en découpant la coque. Inutile de préciser qu’il faudra s’assurer que le placement soit assez haut pour permettre à la cartouche de s’insérer normalement dans la GB.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dans une cartouche avec une pile (quasiment toutes celles qui ont de la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt; et celles avec le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTC&lt;/code&gt;), ça risque être un peu compliqué d’incruster le socket &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt; … Il serait certainement plus simple de faire cela avec un socket &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLCC32&lt;/code&gt; (et une mémoire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;29F040&lt;/code&gt;), ça prendrait beaucoup moins de place !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Et pour finir, le fil !&lt;br /&gt;
Vu la taille des broches des boitiers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOP&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOIC&lt;/code&gt;, généralement moins de &lt;strong&gt;0.5mm&lt;/strong&gt;, il faut prévoir un fil assez fin pour arriver à faire un travail assez propre.&lt;br /&gt;
J’ai pris le plus petit que j’avais dans mon stock, à savoir du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWG30&lt;/code&gt; &lt;em&gt;(0.25mm²)&lt;/em&gt; et il s’avère que ce fil convient parfaitement pour ce projet !&lt;/p&gt;

&lt;h2 id=&quot;remplacer-la-rom-dans-une-cartouche-gameboy&quot;&gt;Remplacer la ROM dans une cartouche GameBoy&lt;/h2&gt;

&lt;p&gt;Nous y voilà ! Il est temps d’attaquer le chantier !&lt;/p&gt;

&lt;p&gt;Pour ma première tentative, j’ai décidé de sacrifier un jeu vraiment nul afin d’avoir aucun regret en cas d’échec.&lt;br /&gt;
&lt;em&gt;Spoiler : J’ai réussi du premier coup ^^&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mon cobaye est donc le jeu &lt;strong&gt;Taxi 2&lt;/strong&gt; &lt;em&gt;(CGB-BT2F-FRA)&lt;/em&gt; qui contient un &lt;strong&gt;mapper&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MBC5&lt;/code&gt; avec une &lt;strong&gt;ROM&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MX23C8005&lt;/code&gt; &lt;em&gt;(1Mo en boitier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOP32&lt;/code&gt;)&lt;/em&gt;.&lt;br /&gt;
Donc pas de &lt;strong&gt;RAM&lt;/strong&gt; ni de &lt;strong&gt;RTC&lt;/strong&gt;, mais ce n’est pas bien grave, le but étant surtout de tester la manipulation afin de confirmer que ça fonctionne pour maximiser les chances de réussite lors des mes prochaines tentatives avec des cartouches plus intéressantes.&lt;/p&gt;

&lt;p&gt;La procédure est assez simple : dessouder la &lt;strong&gt;ROM&lt;/strong&gt; puis souder chaque fil de la &lt;strong&gt;mémoire flash&lt;/strong&gt; à l’emplacement correspondant pour chaque broche.&lt;/p&gt;

&lt;p&gt;Si vous possédez une station à air chaud pour dessouder la &lt;strong&gt;ROM&lt;/strong&gt; tant mieux pour vous mais pensez bien à protéger les autres composants pour rien endommager (notamment la pile si vous en avez une).&lt;br /&gt;
Personnellement je n’ai pas encore de station à air chaud, je vais donc dessouder avec mon fer à souder.&lt;br /&gt;
C’est pas le plus pratique mais ça fonctionne bien en utilisant une petite aiguille à coudre pour soulever chaque patte une à une tant que l’étain est liquide.&lt;/p&gt;

&lt;p&gt;Pour la correspondance des broches, il faut regarder le &lt;strong&gt;datasheet&lt;/strong&gt; de la &lt;strong&gt;ROM&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MX23C8005&lt;/code&gt; dans mon cas), et comparer les placements avec votre &lt;strong&gt;mémoire flash&lt;/strong&gt;, dans mon cas c’est une &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;39SF040&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/23c8000-vs-39sf040.jpg&quot; alt=&quot;Compare MX23C8000 vs SST39SF040&quot; title=&quot;Compare MX23C8000 vs SST39SF040&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On constate 3 choses :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A18&lt;/code&gt; a changé de place&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A19&lt;/code&gt; n’est pas présent sur la mémoire flash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;39SF040&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;La broche &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WE#&lt;/code&gt; est présente uniquement sur la mémoire flash, ce qui s’explique facilement puisqu’il s’agit de la broche &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Write Enable&lt;/code&gt; qui permet de gérer l’écriture (et pour rappel, la &lt;strong&gt;ROM&lt;/strong&gt; ne permet pas l’écriture)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pour &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A18&lt;/code&gt; il suffit de souder le fil à l’emplacement correspondant.&lt;br /&gt;
Pour &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A19&lt;/code&gt; inutile de le raccorder puisque ma mémoire flash fait seulement &lt;strong&gt;512Ko&lt;/strong&gt; et n’a donc pas besoin de ce 20ème bit d’adresse.&lt;br /&gt;
Et enfin pour &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WE#&lt;/code&gt;, cette broche doit être à l’état haut pour le cycle de lecture (afin de se comporter comme la &lt;strong&gt;ROM&lt;/strong&gt;), et vu que je prévois d’extraire la puce pour la programmer en dehors de la cartouche, j’ai décidé de relier cette broche directement à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VCC&lt;/code&gt; pour le moment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Je l’ai pas indiqué avant mais Furrtek a déjà fait un article à ce sujet : &lt;a href=&quot;http://furrtek.free.fr/?a=mbc1flash&quot; target=&quot;_blank&quot;&gt;Furrtek Cartouche Flash MBC1&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Cependant, il est incomplet et il contient au moins une erreur.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;En effet, d’après lui il faut relier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WE#&lt;/code&gt; à la broche &lt;strong&gt;31&lt;/strong&gt; du connecteur de cartouche pour permettre la programmation. Alors oui ça lui permettra de faire la programmation, mais en fonctionnement normal ce n’est pas bon puisque cette broche &lt;strong&gt;31&lt;/strong&gt; correspond à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VIN&lt;/code&gt; et qu’elle fournit rien de concluant, donc pas d’état haut ni d’état bas.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Enfin si, il y a une tension de &lt;strong&gt;1.2V&lt;/strong&gt; qui varie au rythme de la musique, j’ai pas essayé mais il est possible que ce soit un signal audio, dans le meilleur des cas ça serait interprété comme un état bas …&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Donc en fonctionnement normal, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WE#&lt;/code&gt; serait dans un état incertain (probablement bas), ce qui n’est pas bon !&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;(Il y a une autre solution que je dois encore tester et qui devrait être bien plus propre, j’en parlerai dans un prochain article)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Voici donc le résultat :&lt;/p&gt;

&lt;div class=&quot;gallery center&quot;&gt;
    &lt;img src=&quot;/assets/images/replace-gb-cartridge-rom-step-1.jpg&quot; alt=&quot;1. PCB Cartouche Taxi 2&quot; title=&quot;1. PCB Cartouche Taxi 2&quot; class=&quot;lightbox&quot; /&gt;
    &lt;img src=&quot;/assets/images/replace-gb-cartridge-rom-step-2.jpg&quot; alt=&quot;2. PCB Cartouche sans ROM&quot; title=&quot;2. PCB Cartouche sans ROM&quot; class=&quot;lightbox&quot; /&gt;
    &lt;img src=&quot;/assets/images/replace-gb-cartridge-rom-step-3.jpg&quot; alt=&quot;3. Isolation du PCB du socket DIP32&quot; title=&quot;3. Isolation du PCB du socket DIP32&quot; class=&quot;lightbox&quot; /&gt;
    &lt;img src=&quot;/assets/images/replace-gb-cartridge-rom-step-4.jpg&quot; alt=&quot;4. Mise en place dans la cartouche&quot; title=&quot;4. Mise en place dans la cartouche&quot; class=&quot;lightbox&quot; /&gt;
    &lt;img src=&quot;/assets/images/replace-gb-cartridge-rom-step-5.jpg&quot; alt=&quot;5. Rendu final&quot; title=&quot;5. Rendu final&quot; class=&quot;lightbox&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;J’avoue c’est pas très propre !! Faut dire que c’est surtout pour faire un prototype et confirmer que ça fonctionne.&lt;/p&gt;

&lt;p&gt;N’oubliez pas d’isoler toutes les parties qui risqueraient de provoquer un court-circuit.&lt;br /&gt;
Sur la 3ème photo vous pouvez voir que j’ai utilisé du scotch d’électricien noir. J’ai fait en sorte que les soudures ne soient pas pointues afin de ne pas risquer qu’elles traversent le scotch !&lt;/p&gt;

&lt;h2 id=&quot;programmation-de-la-mémoire-et-limitations-à-lexécution&quot;&gt;Programmation de la mémoire et limitations à l’exécution&lt;/h2&gt;

&lt;p&gt;Comme indiqué plus haut dans l’article, pour le moment, je prévois d’extraire la puce de son socket pour la programmer avec mon &lt;a href=&quot;programmateur-eeprom-diy-arduino&quot; target=&quot;_blank&quot;&gt;programmateur fait maison&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Concernant les limitations, tout va dépendre de votre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mapper&lt;/code&gt; et des composants présents sur votre cartouche.&lt;/p&gt;

&lt;p&gt;Par exemple, si votre cartouche possède un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MBC5&lt;/code&gt; sans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt; (comme ma cartouche de test), vous pourrez très bien faire tourner des programmes initialement prévus pour un autre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MBC&lt;/code&gt; tant que ce programme ne nécessite pas de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si vous avez de la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt;, vous pourrez aussi faire tourner des programmes qui n’utilisent pas la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt; mais vous pourrez évidemment faire tourner ceux qui en ont besoin, à partir du moment où vous avez une quantité de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RAM&lt;/code&gt; suffisante.&lt;br /&gt;
C’est évidemment valable aussi pour le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RTC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Qui peut le plus peut le moins, mais l’inverse n’est pas possible, ne demandez pas à votre cartouche de faire quelque chose qu’elle est incapable de faire.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Même si cette solution n’est pas parfaite, elle reste très abordable, intéressante et surtout satisfaisante à réaliser !&lt;/p&gt;

&lt;p&gt;Pour réaliser ce projet j’ai commandé &lt;strong&gt;2 mémoires&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;39SF040&lt;/code&gt; et &lt;strong&gt;10 sockets&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt; pour un total de &lt;strong&gt;4.23€&lt;/strong&gt; frais de port compris sur &lt;strong&gt;aliexpress&lt;/strong&gt;.&lt;br /&gt;
&lt;em&gt;Les prix varient pas mal dans le temps mais ça vaut vraiment le coup ^^, il faut juste être patient car il faut généralement 1 mois pour la livraison.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nul doute qu’il y aura une suite à cet article afin de présenter une évolution :)&lt;br /&gt;
Cependant, l’évolution nécessitera un peu plus de composants, rien que pour permettre de programmer la mémoire directement depuis la cartouche …&lt;/p&gt;

&lt;p&gt;En attendant amusez vous bien et renseignez vous sur les prix des cartouches avant de les sacrifier, par exemple les jeux Pokémon coutent vraiment cher, ça serait dommage de les bousiller.&lt;/p&gt;

&lt;h2 id=&quot;sources-et-inspirations&quot;&gt;Sources et inspirations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;programmateur-eeprom-diy-arduino&quot; target=&quot;_blank&quot;&gt;Programmer une mémoire Flash (EEPROM) 32 broches avec un Arduino&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gb.flob.ovh/&quot; target=&quot;_blank&quot;&gt;Game Boy Cartridges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alldatasheet.com/&quot; target=&quot;_blank&quot;&gt;AllDataSheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://furrtek.free.fr/?a=mbc1flash&quot; target=&quot;_blank&quot;&gt;Furrtek Cartouche Flash MBC1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 03 Aug 2020 12:03:32 +0200</pubDate>
        <link>https://elrindel.github.io/fabrication-cartouche-gameboy-programmable-pas-cher</link>
        <guid isPermaLink="true">https://elrindel.github.io/fabrication-cartouche-gameboy-programmable-pas-cher</guid>
        
        
        <category>gameboy</category>
        
        <category>DIY</category>
        
      </item>
    
      <item>
        <title>Programmer une mémoire Flash (EEPROM) 32 broches avec un Arduino</title>
        <description>&lt;p&gt;Pour un projet, que vous verrez dans mon prochain article, j’avais besoin d’utiliser de la mémoire flash mais je n’avais pas de programmateur.&lt;/p&gt;

&lt;p&gt;Souhaitant proposer une solution facilement accessible (sans devoir acheter un programmateur à 50€ minimum), je me suis documenté pour programmer ma mémoire flash avec le matériel déjà en ma possession et qu’on retrouve chez beaucoup de bidouilleurs.&lt;/p&gt;

&lt;p&gt;J’avais le choix entre un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raspberry Pi&lt;/code&gt; et un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt;.&lt;br /&gt;
J’ai une grosse préférence pour l’&lt;strong&gt;Arduino&lt;/strong&gt;. De plus, il s’avère que les mémoires que je dois programmer fonctionnent sous une tension de &lt;strong&gt;5V&lt;/strong&gt;, ce qui est le cas de mon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt;.&lt;br /&gt;
Le &lt;strong&gt;Raspberry Pi&lt;/strong&gt; aurait compliqué les choses avec les &lt;strong&gt;3.3V&lt;/strong&gt; des GPIO.&lt;br /&gt;
D’ailleurs assurez vous de pas raccorder une mémoire &lt;strong&gt;3.3V&lt;/strong&gt; sur du &lt;strong&gt;5V&lt;/strong&gt; au risque de la griller.&lt;/p&gt;

&lt;p&gt;C’est donc l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; qui me servira de programmateur d’&lt;strong&gt;EEPROM&lt;/strong&gt; !&lt;/p&gt;

&lt;h2 id=&quot;solutions-existantes&quot;&gt;Solutions existantes&lt;/h2&gt;

&lt;p&gt;Il est important de préciser que je veux programmer des mémoires de &lt;strong&gt;512Ko&lt;/strong&gt; via une interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallèle&lt;/code&gt; ce qui implique d’avoir des &lt;strong&gt;mémoires flash&lt;/strong&gt; avec au moins &lt;strong&gt;32 broches&lt;/strong&gt; (voir ci-dessous pour les détails).&lt;/p&gt;

&lt;p&gt;Evidemment je suis pas le premier à me dire qu’on peut programmer des &lt;strong&gt;EEPROM&lt;/strong&gt; avec un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; et j’ai effectivement trouvé deux ou trois projets à ce sujet sur internet.&lt;br /&gt;
Ces derniers sont soit foireux, soit leur code me plait pas, soit ils sont incomplets … J’ai donc décidé de faire ma propre version que je vais vous partager ici !&lt;/p&gt;

&lt;h3 id=&quot;comment-lire-et-écrire-une-mémoire-flash-&quot;&gt;Comment lire et écrire une mémoire flash ?&lt;/h3&gt;

&lt;p&gt;Comme évoqué ci-dessus, je vais utiliser des mémoires avec une interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallèle&lt;/code&gt; et &lt;strong&gt;32 broches&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Une puce mémoire avec interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parallèle&lt;/code&gt; possède un certain nombre d’entrées allant de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A0&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMS&lt;/code&gt; &lt;em&gt;(Most signifiant address)&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A0&lt;/code&gt; étant donc le bit de poids faible et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMS&lt;/code&gt; le bit de poids fort.&lt;br /&gt;
Ces entrées correspondent à l’adresse mémoire ciblée et leur nombre va donc dépendre de la taille de la mémoire.&lt;/p&gt;

&lt;p&gt;Par exemple, pour &lt;strong&gt;512Ko&lt;/strong&gt; on aura &lt;strong&gt;19 entrées&lt;/strong&gt;, donc de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A0&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A18&lt;/code&gt;, car il faut &lt;strong&gt;19 bits&lt;/strong&gt; pour atteindre toutes les adresses mémoire : &lt;strong&gt;512Ko&lt;/strong&gt; = &lt;strong&gt;524288 octets&lt;/strong&gt; (oui je devrais écrire Kio pour être exact … mais on se comprend ^^), vu qu’on commence à l’adresse 0, la dernière adresse sera &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;524287&lt;/code&gt; ce qui nécessite exactement &lt;strong&gt;19 bits&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ensuite on trouve les &lt;strong&gt;8&lt;/strong&gt; broches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DQ0&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DQ7&lt;/code&gt; qui sont des sorties en mode &lt;strong&gt;lecture&lt;/strong&gt; et des entrées en mode &lt;strong&gt;écriture&lt;/strong&gt; !&lt;br /&gt;
Lors de la &lt;strong&gt;lecture&lt;/strong&gt;, elles vont prendre la valeur de la donnée contenue à l’adresse mémoire ciblée.&lt;br /&gt;
Et inversement, lors de l’&lt;strong&gt;écriture&lt;/strong&gt;, l’adresse mémoire ciblée va prendre la valeur qu’on enverra sur ces broches.&lt;/p&gt;

&lt;p&gt;Le mode va dépendre de l’état des 3 entrées suivantes : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CE#&lt;/code&gt; &lt;em&gt;(Chip Enable)&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OE#&lt;/code&gt; &lt;em&gt;(Output Enable)&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WE#&lt;/code&gt; &lt;em&gt;(Write Enable)&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Ces entrées sont activées à l’état bas (et donc désactivées à l’état haut), d’ailleurs on peut constater cela via la notation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;la-lecture&quot;&gt;La lecture&lt;/h4&gt;

&lt;p&gt;Le mode &lt;strong&gt;lecture&lt;/strong&gt; est le plus simple car il suffit de désactiver &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WE#&lt;/code&gt; puis d’activer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CE#&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OE#&lt;/code&gt; pour obtenir directement l’octet de l’adresse ciblée par les entrées &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A0&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Voici le diagramme représentant la lecture d’une mémoire flash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SST39SF040&lt;/code&gt; (valable pour beaucoup d’autres mémoires) :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39sf040-read-diagram.jpg&quot; alt=&quot;39SF040 Read Diagram&quot; title=&quot;39SF040 Read Diagram&quot; class=&quot;center lightbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Les seules limitations sont donc les temps d’attente entre l’assignation de l’adresse mémoire et l’accès aux données.&lt;br /&gt;
Ces temps vont varier suivant les modèles, on parle de quelques dizaines de nanosecondes, mais il s’agit d’une durée minimale, on peut très bien attendre plus longtemps pour être certain d’accéder aux données.&lt;/p&gt;

&lt;h4 id=&quot;lécriture&quot;&gt;L’écriture&lt;/h4&gt;

&lt;p&gt;Pour l’&lt;strong&gt;écriture&lt;/strong&gt; c’est plus délicat car il faut suivre une procédure pour réellement écrire dans la mémoire.&lt;br /&gt;
En effet, il ne suffit pas d’activer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WE#&lt;/code&gt; avec l’adresse et l’octet souhaités !&lt;/p&gt;

&lt;p&gt;La procédure à suivre s’appelle une &lt;strong&gt;séquence&lt;/strong&gt; qui correspond à l’&lt;strong&gt;envoi&lt;/strong&gt; de certaines données à certaines adresses précises pour basculer dans le mode souhaité.&lt;br /&gt;
Ces données de &lt;strong&gt;séquence&lt;/strong&gt; ne sont pas écrites dans la mémoire (il n’y a donc pas de corruption de données en mémoire, heureusement).&lt;/p&gt;

&lt;p&gt;Via différentes &lt;strong&gt;séquences&lt;/strong&gt; on peut ainsi exécuter quelques commandes sur la mémoire, comme :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ecrire une donnée&lt;/li&gt;
  &lt;li&gt;Effacer une adresse mémoire&lt;/li&gt;
  &lt;li&gt;Effacer l’ensemble de la mémoire&lt;/li&gt;
  &lt;li&gt;Récupérer l’identifiant du fabricant et le modèle&lt;/li&gt;
  &lt;li&gt;Certaines mémoires proposent aussi un mode verrouillage (pour bloquer l’écriture)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces &lt;strong&gt;séquences&lt;/strong&gt; sont disponibles dans le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasheet&lt;/code&gt; de chaque mémoire !&lt;br /&gt;
Le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasheet&lt;/code&gt; est un document indispensable en électronique, il regroupe toutes les informations techniques ainsi que des exemples d’utilisation (de temps en temps) pour chaque composant.&lt;br /&gt;
Une simple recherche suffit à trouver un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasheet&lt;/code&gt; en utilisant tout simplement les mots clés &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datasheet REFERENCE&lt;/code&gt; &lt;em&gt;(&lt;strong&gt;REFERENCE&lt;/strong&gt; étant évidemment la référence du composant que vous recherchez)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Concernant les mémoires qui m’intéressent pour mon projet, je retrouve quasiment toujours les mêmes &lt;strong&gt;séquences&lt;/strong&gt;.&lt;br /&gt;
Pour le moment j’ai trouvé seulement 2 variantes. Dans tous les cas il suffit de lire la documentation pour savoir quelle &lt;strong&gt;séquence&lt;/strong&gt; utiliser pour votre mémoire et adapter le programme au besoin (voir plus bas).&lt;/p&gt;

&lt;p&gt;Par exemple, voilà les séquences disponibles pour la mémoire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SST39SF040&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39sf040-sequences.jpg&quot; alt=&quot;39SF040 Sequences&quot; title=&quot;39SF040 Sequences&quot; class=&quot;center lightbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Et enfin le diagramme représentant l’écriture :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/39sf040-write-diagram.jpg&quot; alt=&quot;39SF040 Write Diagram&quot; title=&quot;39SF040 Write Diagram&quot; class=&quot;center lightbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Comme pour la lecture, il est nécessaire de respecter certains timing.&lt;/p&gt;

&lt;p&gt;Ceci dit, l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; n’est pas très rapide et la majorité des opérations peuvent passer sans gérer les timing si le programme n’est pas très optimisé, mais il est préférable de les gérer pour pas avoir de surprise.&lt;/p&gt;

&lt;h2 id=&quot;les-composants-pour-fabriquer-votre-propre-programmateur-deeprom&quot;&gt;Les composants pour fabriquer votre propre programmateur d’EEPROM&lt;/h2&gt;

&lt;p&gt;Faisons les comptes des broches :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;19&lt;/code&gt; pour l’adresse&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt; pour les données&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; pour les contrôles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30&lt;/code&gt; broches qu’on va devoir manipuler (les 2 restantes correspondent à l’alimentation).&lt;/p&gt;

&lt;p&gt;L’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; possède &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;14&lt;/code&gt; entrées/sorties numériques et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; entrées analogiques.&lt;br /&gt;
On peut déjà oublier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; entrées/sortie numériques (pin 0 et pin 1) car elles sont utilisées pour la communication série (dont on aura besoin pour communiquer avec le PC).&lt;br /&gt;
Heureusement on peut utiliser les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt; entrées analogique comme entrée/sortie numérique !&lt;/p&gt;

&lt;p&gt;Ce qui fait un total de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18&lt;/code&gt; entrées/sorties exploitables avec l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;Ce n’est donc pas suffisant mais il existe au moins deux solutions très simples à ce problème :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;2 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;74HC595&lt;/code&gt; : Registre à décalage 8 bits (voir ci-dessous pour plus de détails)&lt;/li&gt;
  &lt;li&gt;2 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;74HC574&lt;/code&gt; : Bascule 8 bits&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personnellement j’ai choisi la première solution mais les deux sont tout à fait viables pour ajouter des sorties.&lt;br /&gt;
Les &lt;strong&gt;registres à décalage&lt;/strong&gt; ont cependant un très gros avantage car on peut en ajouter autant qu’on veut à la suite sans avoir besoin de sacrifier une sortie de l’Arduino à chaque nouvelle puce (contrairement aux bascules qui doivent être pilotées indépendamment les unes des autres).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;D’ailleurs, petite info intéressante à ce sujet, on retrouve généralement des registres à décalage dans les bandeaux de led paramétrables. Si le bandeau permet de contrôler n’importe quelle led indépendamment des autres alors il y a de fortes chances pour que chaque led possède un registre à décalage.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;C’est bien beau toutes ces entrées/sorties mais il faut les raccorder aux broches de la mémoire flash.&lt;br /&gt;
Pour faire cela tout en pouvant insérer/retirer la puce mémoire facilement, il faut utiliser soit un &lt;strong&gt;socket&lt;/strong&gt;, soit une &lt;strong&gt;breadboard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;L’utilisation d’un &lt;strong&gt;socket&lt;/strong&gt; implique la conception d’un circuit imprimé (enfin il est toujours possible de faire ça en l’air évidemment, mais c’est pas très propre/fiable).&lt;br /&gt;
Donc si vous avez une &lt;strong&gt;plaque de prototypage&lt;/strong&gt; ou la possibilité de faire votre propre &lt;strong&gt;PCB&lt;/strong&gt;, vous pouvez étudier cette solution, sinon ça sera une &lt;strong&gt;breadboard&lt;/strong&gt; !&lt;br /&gt;
&lt;em&gt;Il est également possible de faire fabriquer un circuit via des sites comme JLCPCB, PCBWay etc…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;J’ai ce qu’il faut pour faire des &lt;strong&gt;circuits imprimés simple face&lt;/strong&gt; du coup je pars sur la solution &lt;strong&gt;socket&lt;/strong&gt; afin de faire quelque chose d’un peu plus propre qu’un simple prototype.&lt;br /&gt;
D’ailleurs, en parlant de &lt;strong&gt;socket&lt;/strong&gt;, il est temps d’aborder le sujet du &lt;strong&gt;package (boitier)&lt;/strong&gt; de la puce ! Afin de pouvoir la manipuler facilement j’ai choisi du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt;.&lt;br /&gt;
Dans une seconde version je prévois l’utilisation du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLCC32&lt;/code&gt; qui peut également être manipulé facilement avec la pince qui va bien.&lt;/p&gt;

&lt;p&gt;Donc, pour résumer, les composants nécessaires sont :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; (ou autre avec au moins autant de pins que le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uno&lt;/code&gt; et la bonne tension)&lt;/li&gt;
  &lt;li&gt;2 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;74HC595&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;1 x &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Socket DIP32&lt;/code&gt; ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breadboad&lt;/code&gt; (si vous avez ou non la possibilité de faire un PCB)&lt;/li&gt;
  &lt;li&gt;Au moins une mémoire flash en boitier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIP32&lt;/code&gt;, dans mon cas ça sera une &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;39SF040&lt;/code&gt; (pour le boitier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PLCC32&lt;/code&gt; j’ai des &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AM29F040&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous pouvez trouver l’ensemble de ces composants sur internet pour vraiment pas cher. Si vous n’êtes pas trop pressés vous trouverez votre bonheur sur des sites comme &lt;strong&gt;Aliexpress&lt;/strong&gt; ou &lt;strong&gt;Ebay&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;explications-registre-à-décalage-74hc595&quot;&gt;Explications registre à décalage 74HC595&lt;/h3&gt;

&lt;p&gt;Ce registre à décalage possède &lt;strong&gt;16 broches&lt;/strong&gt; dont &lt;strong&gt;9 sont des sorties&lt;/strong&gt; (les broches de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QA&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QH&lt;/code&gt; ainsi que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QH'&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Lors d’un cycle, chaque sortie va prendre la valeur de la sortie précédente, excepté &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QA&lt;/code&gt; qui prendra la valeur de l’entrée &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SER&lt;/code&gt;, et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QH'&lt;/code&gt; qui est en quelque sorte une copie de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QH&lt;/code&gt; (et prendra donc la valeur de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QG&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Le mieux pour illustrer ces cycles, c’est encore de regarder le diagramme disponible dans le &lt;strong&gt;datasheet&lt;/strong&gt; du composant :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/74hc595-timing-diagram.jpg&quot; alt=&quot;74HC595 Timing Diagram&quot; title=&quot;74HC595 Timing Diagram&quot; class=&quot;center lightbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ce diagramme montre bien la progression d’un bit envoyé initialement via l’entrée &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SER&lt;/code&gt; puis propagé dans chaque sortie l’une après l’autre à chaque cycle.&lt;/p&gt;

&lt;p&gt;Ceci dit, ce diagramme pourrait laisser penser qu’il faut absolument jongler avec les deux horloges &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRCLK&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCLK&lt;/code&gt; afin d’attribuer tous les &lt;strong&gt;bits&lt;/strong&gt; du registre, mais c’est faux !&lt;br /&gt;
En effet, pour constater cela il faut regarder un autre diagramme, le &lt;strong&gt;diagramme logique&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/74hc595-logic-diagram.jpg&quot; alt=&quot;74HC595 Logic Diagram&quot; title=&quot;74HC595 Logic Diagram&quot; class=&quot;center lightbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On peut constater que pour &lt;strong&gt;1 bit&lt;/strong&gt; il y a &lt;strong&gt;2 registres différents&lt;/strong&gt;, le premier permet de gérer le décalage (colonne de gauche sur le diagramme), et le second stockera la valeur pour la sortie (colonne de droite).&lt;br /&gt;
Le premier est géré par l’horloge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRCLK&lt;/code&gt; et le second par &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCLK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En clair, ça veut dire qu’on peut simplifier la gestion des horloges pour configurer l’ensemble des registres à décalage en utilisant uniquement l’horloge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRCLK&lt;/code&gt; pour définir tous les &lt;strong&gt;bits&lt;/strong&gt;, puis une fois qu’ils sont tous configurés on a plus qu’à faire un coup d’horloge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCLK&lt;/code&gt; pour envoyer les valeurs sur la sortie.&lt;/p&gt;

&lt;p&gt;Un autre point intéressant, la sortie &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QH'&lt;/code&gt; n’est pas liée à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCLK&lt;/code&gt; ni à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OE#&lt;/code&gt;, on peut donc raccorder autant de puces qu’on le souhaite en série sans avoir besoin de faire un cycle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCLK&lt;/code&gt; entre chaque puce et sans dépendre de l’état de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OE#&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;Donc en reliant la sortie &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QH'&lt;/code&gt; d’une puce à l’entrée &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SER&lt;/code&gt; d’une autre puce, on permet aux données de passer d’une puce à l’autre.&lt;br /&gt;
Il reste juste à relier toutes les broches communes à toutes les puces ensemble : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VCC&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GND&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RCLK&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRCLK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Les deux dernière broche, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OE#&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRCLR&lt;/code&gt;, sont également communes à toutes les puces.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OE#&lt;/code&gt; permet d’activer les sorties, dans le cas présent elles seront toujours actives, pour cela il faut mettre cette broche à l’état bas.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRCLR&lt;/code&gt; est un simple reset pour réinitialiser les registres à zéro. Ici c’est inutile, on va donc laisser cette broche à l’état haut (le reset est fait au passage à l’état bas).&lt;/p&gt;

&lt;h2 id=&quot;le-schéma-électronique&quot;&gt;Le schéma électronique&lt;/h2&gt;

&lt;p&gt;On a tout vu dans les chapitres précédents.&lt;br /&gt;
Le schéma consiste donc tout simplement à raccorder les &lt;strong&gt;registres à décalage&lt;/strong&gt; ensemble, relier leurs sorties sur les entrées &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A0&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMS&lt;/code&gt; de la mémoire, relier les alimentations puis apporter tout le reste sur des connecteurs pour y raccorder l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sur le schéma j’ai directement inséré l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; comme pour réaliser un &lt;strong&gt;shield arduino&lt;/strong&gt; (ça permet aussi de voir les raccordements à faire ^^).&lt;br /&gt;
Mais lors de la fabrication du circuit, je n’ai pas fait de &lt;strong&gt;shield arduino&lt;/strong&gt; car c’était trop délicat à faire avec un &lt;strong&gt;circuit simple face&lt;/strong&gt; (et pour tout vous dire, j’ai foiré ma tentative de shield …).&lt;br /&gt;
Je suis donc parti sur un simple PCB avec des connecteurs classiques en &lt;strong&gt;2.54mm&lt;/strong&gt; (standard qu’on retrouve un peu partout, Arduino, breadboard etc…).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/arduino-flash-programmer-sch.jpg&quot; alt=&quot;Arduino Flash Programmer Schéma&quot; title=&quot;Arduino Flash Programmer Schéma&quot; class=&quot;center lightbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;J’ai fait le choix d’utiliser seulement &lt;strong&gt;2 registres à décalage&lt;/strong&gt;, ce qui fait &lt;strong&gt;16 sorties&lt;/strong&gt;, je dois donc gérer les &lt;strong&gt;3 dernières&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A16&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A17&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A18&lt;/code&gt;) directement avec les sorties de l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; (donc sur un connecteur).&lt;/p&gt;

&lt;h2 id=&quot;aperçu-de-mon-prototype&quot;&gt;Aperçu de mon prototype&lt;/h2&gt;

&lt;p&gt;Comme précisé précédemment, je peux fabriquer uniquement des circuits imprimés à une face, ce qui n’est pas suffisant pour un tel projet si on veut faire ça proprement.&lt;/p&gt;

&lt;p&gt;En effet, il faudra forcément croiser certaines liaisons pour un tel montage, ce qui nécessite d’avoir au moins deux couches de cuivre.&lt;/p&gt;

&lt;p&gt;J’ai donc fait comme je pouvais avec une couche et j’ai fini les liaisons manquantes avec quelques morceaux de fil.&lt;/p&gt;

&lt;p&gt;C’est donc un prototype loin d’être parfait (c’est un peu le rôle d’un prototype d’ailleurs) et je préfère ne pas partager les fichiers de cette conception car j’estime que ce n’est pas assez propre pour l’être.&lt;br /&gt;
&lt;em&gt;(Il est cependant possible que je fasse évoluer ce projet en faisant un beau PCB 2 couches, mais ça sera pas avant 2021 je pense).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mais voilà quand même un aperçu :&lt;/p&gt;

&lt;div class=&quot;gallery center&quot;&gt;
    &lt;img src=&quot;/assets/images/arduino-flash-programmer-prototype-1.jpg&quot; alt=&quot;Arduino Flash Programmer Prototype&quot; title=&quot;Arduino Flash Programmer Prototype&quot; class=&quot;lightbox&quot; /&gt;
    &lt;img src=&quot;/assets/images/arduino-flash-programmer-prototype-2.jpg&quot; alt=&quot;Arduino Flash Programmer Prototype&quot; title=&quot;Arduino Flash Programmer Prototype&quot; class=&quot;lightbox&quot; /&gt;
    &lt;img src=&quot;/assets/images/arduino-flash-programmer-prototype-3.jpg&quot; alt=&quot;Arduino Flash Programmer Prototype&quot; title=&quot;Arduino Flash Programmer Prototype&quot; class=&quot;lightbox&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;le-software-pour-gérer-la-programmation-de-la-mémoire&quot;&gt;Le software pour gérer la programmation de la mémoire&lt;/h2&gt;

&lt;p&gt;Il y a donc deux parties à coder, une pour l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; (en &lt;strong&gt;C&lt;/strong&gt;), l’autre pour le PC (en &lt;strong&gt;Python&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Afin de faciliter l’utilisation, j’ai fait en sorte de pouvoir accéder à toutes les commandes sur l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; sans utiliser le client en &lt;strong&gt;python&lt;/strong&gt; sur le PC.&lt;/p&gt;

&lt;p&gt;Il est donc possible de manipuler la mémoire flash via un simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moniteur série&lt;/code&gt; comme celui proposé dans l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDE Arduino&lt;/code&gt; ou tout autre client dans le genre comme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Putty&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;C’était surtout pratique pour les tests, mais désormais je n’utilise plus que mon client en &lt;strong&gt;python&lt;/strong&gt; !&lt;/p&gt;

&lt;h3 id=&quot;arduino&quot;&gt;Arduino&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ATTENTION : Comme je l’ai déjà précisé dans l’introduction de cet article, j’ai des mémoires qui fonctionnent sous une tension de 5V et mon &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino Uno&lt;/code&gt; est également en 5V.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Il est TRES IMPORTANT de vous assurer que votre mémoire et votre Arduino fonctionnement avec la même tension (pas seulement au niveau de l’alimentation mais aussi au niveau des sorties de l’Arduino) !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;J’ai fait deux version, une optimisée et compatible uniquement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uno&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nano&lt;/code&gt; (et normalement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Due&lt;/code&gt; aussi), ainsi qu’une pour les autres cartes avec assez de pins comme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mega&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Yun&lt;/code&gt; ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Micro&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La version pour les autres cartes fonctionne aussi sur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uno&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nano&lt;/code&gt; mais je trouve le code vraiment moche et clairement pas optimisé.&lt;br /&gt;
La seule différence étant la manipulation des &lt;strong&gt;registres des ports&lt;/strong&gt; de l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; sur la version optimisée alors que l’autre version utilise les fonctions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; pour faire ces manipulations (fonctions vraiment lourdes en temps d’exécution, et il faut bien l’avouer, c’est moche).&lt;br /&gt;
Le problème c’est que ces &lt;strong&gt;registres&lt;/strong&gt; ne sont pas les mêmes sur toutes les cartes et ils sont même dans le désordre sur certaines …&lt;br /&gt;
D’ailleurs, c’est surtout le fait que ce soit dans le désordre qui est problématique car dans le cas contraire j’aurais pu mapper les bons &lt;strong&gt;registres&lt;/strong&gt; suivant la carte sélectionnée lors de la compilation …&lt;/p&gt;

&lt;p&gt;Pour plus de détails sur l’utilisation des &lt;strong&gt;registres&lt;/strong&gt; pour manipuler les pins de l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arduino.cc/en/Reference/PortManipulation&quot; target=&quot;_blank&quot;&gt;Arduino Port Registers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arduino.pinout.guide/&quot; target=&quot;_blank&quot;&gt;Pinout Arduino&lt;/a&gt; &lt;em&gt;(il faut voir la valeur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Port Pin&lt;/code&gt; de chaque pin pour savoir sur quel registre ils sont)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je ne vais pas rentrer dans les détails du code ici.&lt;br /&gt;
Toutes les instructions sont disponibles dans le &lt;strong&gt;readme&lt;/strong&gt; du projet : &lt;a href=&quot;https://github.com/Elrindel/Arduino-Flash-Programmer&quot; target=&quot;_blank&quot;&gt;Arduino Flash Programmer&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;pc&quot;&gt;PC&lt;/h3&gt;

&lt;p&gt;Bien qu’il soit optionnel, c’est beaucoup plus simple d’utiliser un petit client en ligne de commande pour gérer la communication avec l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; plutôt que d’ouvrir un moniteur série et envoyer toutes les commandes manuellement.&lt;br /&gt;
Surtout si il faut envoyer un certain nombre de données (comme pour écrire un fichier entier dans la mémoire).&lt;/p&gt;

&lt;p&gt;Il y a donc rien d’extraordinaire dans ce code, c’est juste une gestion des arguments avec quelques petites validations, puis une communication série avec l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La configuration du port série est celle de l’&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt; par défaut, à savoir &lt;strong&gt;8 data bits, no parity, 1 stop bit&lt;/strong&gt; avec une vitesse de &lt;strong&gt;115200 baud&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Comme pour le code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arduino&lt;/code&gt;, toutes les infos sont dans le &lt;strong&gt;readme&lt;/strong&gt; : &lt;a href=&quot;https://github.com/Elrindel/Arduino-Flash-Programmer&quot; target=&quot;_blank&quot;&gt;Arduino Flash Programmer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Je suis loin d’avoir traité tout le sujet de la programmation de mémoire flash mais ça reste une bonne initiation je pense :)&lt;/p&gt;

&lt;p&gt;En tout cas ce projet peut clairement évoluer, il est donc possible qu’il y ait une évolution et donc un nouvel article (c’est même fort probable) !&lt;/p&gt;

&lt;p&gt;D’ailleurs, mon prochain article sera indirectement lié puisqu’il s’agira d’une mise en pratique concrète afin de réaliser un autre projet.&lt;/p&gt;

&lt;h2 id=&quot;sources-et-inspirations&quot;&gt;Sources et inspirations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Elrindel/Arduino-Flash-Programmer&quot; target=&quot;_blank&quot;&gt;Code du projet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.alldatasheet.com/&quot; target=&quot;_blank&quot;&gt;AllDataSheet&lt;/a&gt; &lt;em&gt;(Bah oui, sans datasheet on fait pas grand chose ^^)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mkeller0815/MEEPROMMER&quot; target=&quot;_blank&quot;&gt;MEEPROMMER&lt;/a&gt; &lt;em&gt;(Un projet similaire qui m’a inspiré)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.arduino.cc/en/Reference/PortManipulation&quot; target=&quot;_blank&quot;&gt;Arduino Port Registers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arduino.pinout.guide/&quot; target=&quot;_blank&quot;&gt;Pinout Arduino&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 18 Jul 2020 10:03:32 +0200</pubDate>
        <link>https://elrindel.github.io/programmateur-eeprom-diy-arduino</link>
        <guid isPermaLink="true">https://elrindel.github.io/programmateur-eeprom-diy-arduino</guid>
        
        
        <category>DIY</category>
        
      </item>
    
      <item>
        <title>Suite SHA1 sur GameBoy : Interface graphique</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/images/sha1-gui-gb.png&quot; alt=&quot;SHA1 GUI GameBoy&quot; title=&quot;SHA1 GUI GameBoy&quot; class=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cet article est la suite de mon premier article sur &lt;a href=&quot;implementation-sha1-sur-gameboy&quot; target=&quot;_blank&quot;&gt;l’implémentation SHA1 sur Gameboy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ici nous allons voir comment créer une interface graphique afin d’utiliser l’algorithme SHA1.&lt;/p&gt;

&lt;p&gt;L’objectif est donc de permettre la saisie d’un texte et de réaliser l’affichage du hash SHA1 pour le texte renseigné.&lt;/p&gt;

&lt;h2 id=&quot;ecrire-un-texte-sur-gameboy&quot;&gt;Ecrire un texte sur GameBoy&lt;/h2&gt;

&lt;p&gt;On pourrait penser qu’il s’agit d’une fonctionnalité intégrée par défaut dans la GB mais ce n’est pas le cas !&lt;/p&gt;

&lt;p&gt;Son écran de &lt;strong&gt;160x144 pixels&lt;/strong&gt; est divisé en &lt;strong&gt;360&lt;/strong&gt; sections de &lt;strong&gt;8x8 pixels&lt;/strong&gt; qui font chacune référence à une &lt;strong&gt;tile&lt;/strong&gt;, donc nous avons un affichage de &lt;strong&gt;20x18 tiles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Une &lt;strong&gt;tile&lt;/strong&gt; est une image de &lt;strong&gt;8x8 pixels&lt;/strong&gt;. Chaque pixel nécessitant &lt;strong&gt;2 bits&lt;/strong&gt; afin de correspondre à l’une des 4 couleurs possibles, on se retrouve donc avec &lt;strong&gt;16 octets (128 bits)&lt;/strong&gt; par tile.&lt;/p&gt;

&lt;p&gt;Ces &lt;strong&gt;tiles&lt;/strong&gt; sont chargées en mémoire dans la partie VRAM, à partir de l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8000&lt;/code&gt; ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8800&lt;/code&gt; suivant le &lt;strong&gt;bit 4&lt;/strong&gt; que vous aurez définit à l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF40&lt;/code&gt; : &lt;a href=&quot;specifications-gameboy#lcdcontrolregister&quot; target=&quot;_blank&quot;&gt;Voir les spécifications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vous l’aurez peut-être déjà compris, si on veut afficher du texte, il nous faut des &lt;strong&gt;tiles&lt;/strong&gt; qui correspondent aux caractères qu’on souhaite afficher !&lt;/p&gt;

&lt;h2 id=&quot;choisir-la-police-décriture&quot;&gt;Choisir la police d’écriture&lt;/h2&gt;

&lt;p&gt;Etrangement, il s’avère un peu compliqué de trouver des &lt;strong&gt;packs de tiles de caractères pour GB&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Après quelque recherches je suis arrivé sur ce site : &lt;a href=&quot;https://www.min.at/prinz/o/software/pixelfont/&quot; target=&quot;_blank&quot;&gt;Pixel Font Edit&lt;/a&gt;&lt;br /&gt;
Ne souhaitant pas installer l’application, j’ai simplement récupéré les fichiers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pf&lt;/code&gt; présents dans l’archive d’installation, ils sont disponibles sur mon GitHub à cette adresse : &lt;a href=&quot;https://github.com/Elrindel/GameBoy-Tiles-Fonts&quot; target=&quot;_blank&quot;&gt;GameBoy Tiles Fonts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ces fichiers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pf&lt;/code&gt; contiennent 256 caractères mais sous un format différent des &lt;strong&gt;tiles&lt;/strong&gt; pour la GameBoy.&lt;br /&gt;
J’ai donc préparé un petit script de conversion :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Usage : font.py [OPTIONS] &amp;lt;FontFile&amp;gt;

Options :
-o  Output file
-s  Start offset
-l  Limit tiles (number of tiles to export)
&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o:s:l:h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;limit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetoptError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-l&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--limit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fontChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontChar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;tileChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tileCharCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tileCharCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tileCharCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tileChar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tileCharCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tileCharCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tileChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;J’ai fait en sorte de pouvoir sélectionner le caractères de départ (option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s&lt;/code&gt;) ainsi que le nombre de caractères (option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-l&lt;/code&gt;) afin de générer facilement les tiles dont on a besoin sans pour autant convertir les 256 caractères.&lt;/p&gt;

&lt;p&gt;Exemple d’utilisation : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pftotiles.py -s 24 -l 104 -o TINYTYPE.bin TINYTYPE.pf&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;Permet de convertir 104 caractères à partir du 25ème caractères (l’offset commence à zéro).&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;ajouter-les-tiles-au-programme&quot;&gt;Ajouter les tiles au programme&lt;/h2&gt;

&lt;p&gt;Maintenant qu’on a notre fichier de &lt;strong&gt;tiles&lt;/strong&gt;, il faut l’insérer dans le code :&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ORG&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$0800&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;tiles:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INCBIN&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TINYTYPE.bin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On inclut ces données à l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0800&lt;/code&gt;.&lt;br /&gt;
Je n’ai pas trouvé d’indications concernant cette adresse en particulier, je suppose donc qu’on peut l’inclure à n’importe quelle adresse libre dans la ROM (donc après le programme) : &lt;a href=&quot;specifications-gameboy#memorymap&quot; target=&quot;_blank&quot;&gt;Répartition de la mémoire&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pour ce projet, l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x0800&lt;/code&gt; est bien libre donc je vais l’utiliser.&lt;/p&gt;

&lt;p&gt;Désormais on peut charger ces &lt;strong&gt;tiles&lt;/strong&gt; dans l’espace mémoire réservé aux &lt;strong&gt;tiles&lt;/strong&gt; pour l’affichage (VRAM) :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;de = 1664&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = $8180&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tiles&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;bc = tiles&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loadTile:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;;de -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                      &lt;span class=&quot;c1&quot;&gt;;a = e&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                        &lt;span class=&quot;c1&quot;&gt;;a |= b&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loadTile&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;Si a != 0 : Jump loadTile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lorsque j’ai généré mon fichier de &lt;strong&gt;tiles&lt;/strong&gt; (voir le chapitre précédent) j’ai limité à 104 caractères, chaque &lt;strong&gt;tile&lt;/strong&gt; faisant 16 octets, c’est pourquoi je charge &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1664 octets&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Concernant l’adresse de départ (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8180&lt;/code&gt;), l’explication est très similaire.&lt;br /&gt;
Lors de la génération des &lt;strong&gt;tiles&lt;/strong&gt; j’ai décidé de commencer au 25ème caractère (donc un offset de 24), ce qui fait un décalage de 24x16 octets (384 = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x180&lt;/code&gt;).&lt;br /&gt;
Voir le chapitre suivant pour plus de détails sur ce placement !&lt;/p&gt;

&lt;h2 id=&quot;utiliser-directement-une-chaine-de-caractères-&quot;&gt;Utiliser directement une chaine de caractères !&lt;/h2&gt;

&lt;p&gt;Comme on l’a vu, sur la GB les caractères sont des &lt;strong&gt;tiles&lt;/strong&gt; qu’on doit charger nous même en mémoire. On peut donc les ranger comme on veut !&lt;/p&gt;

&lt;p&gt;La meilleure solution pour faciliter au maximum l’utilisation de ces &lt;strong&gt;tiles&lt;/strong&gt; est donc de les faire correspondre à l’ordre qu’on a l’habitude de manipuler en informatique, c’est à dire l’&lt;a href=&quot;https://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange&quot; target=&quot;_blank&quot;&gt;ASCII&lt;/a&gt; !&lt;br /&gt;
Ca tombe bien puisque c’est déjà l’ordre des caractères dans les polices d’écriture 8x8 que nous avons vu ci-dessus.&lt;/p&gt;

&lt;p&gt;Chaque &lt;strong&gt;tile&lt;/strong&gt; possède un numéro, on peut donc faire coïncider ce numéro à la valeur ASCII du caractère.&lt;/p&gt;

&lt;p&gt;Mon caractère de référence (mon point de départ) est l’espace (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x20&lt;/code&gt;), les caractères précédents étants moins facilement identifiables. On doit donc placer la &lt;strong&gt;tile&lt;/strong&gt; du caractère espace en position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x20&lt;/code&gt;.&lt;br /&gt;
Les &lt;strong&gt;tiles&lt;/strong&gt; commencent à l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8000&lt;/code&gt; et chaque &lt;strong&gt;tile&lt;/strong&gt; occupe 16 octets. L’adresse de la &lt;strong&gt;tile&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x20&lt;/code&gt; est donc &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8000 + 16 * 0x20&lt;/code&gt; ce qui fait &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8200&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On sait à quelle adresse placer le caractères espace, mais nous avons d’autres &lt;strong&gt;tiles&lt;/strong&gt; avant l’espace dans le fichier que nous avons généré.&lt;br /&gt;
Il suffit donc de soustraire ces &lt;strong&gt;tiles&lt;/strong&gt; à l’adresse pour savoir à partir de quelle espace mémoire il faudra insérer nos &lt;strong&gt;tiles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;J’ai 8 caractères avant l’espace dans mon fichier, je dois donc retirer 8 * 16 octets à l’adresse de l’espace : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8200 - 8 * 16&lt;/code&gt; = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x8180&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maintenant que nos &lt;strong&gt;tiles&lt;/strong&gt; sont bien placées en mémoire, nous pouvons stocker nos chaines de caractères directement dans la ROM tout comme on l’a fait précédemment pour le fichier des &lt;strong&gt;tiles&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-rb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ORG&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$0800&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;tiles:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INCBIN&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TINYTYPE.bin&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;strText:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Text :&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;strHash:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SHA1 :&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;strPressUpDown:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; : Change char&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;strPressA:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A   : Select char&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;strPressB:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B   : Deselect char&quot;&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;strPressStart:
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Press START to hash&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;J’utilise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.DB&lt;/code&gt; pour définir mes textes, et dans le cas des caractères spéciaux j’ai préféré utiliser le code hexa directement (pour les flèches up et down dans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strPressUpDown&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Je peux désormais atteindre mes chaines de caractères facilement dans mon code en utilisant les labels !&lt;/p&gt;

&lt;h2 id=&quot;comment-afficher-les-tiles-à-lécran&quot;&gt;Comment afficher les tiles à l’écran&lt;/h2&gt;

&lt;p&gt;L’affichage est directement lié au contenu des espaces mémoire des 3 différentes couches graphiques (&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;, &lt;a href=&quot;#window&quot;&gt;Window&lt;/a&gt;, &lt;a href=&quot;#sprites&quot;&gt;Sprites&lt;/a&gt; à voir ci-dessous).&lt;/p&gt;

&lt;p&gt;Seulement il n’est pas possible d’écrire des données n’importe quand dans ces espaces mémoire !&lt;br /&gt;
En effet, il faut attendre que l’écran soit éteint ou que l’affichage n’utilise plus la mémoire vidéo.&lt;br /&gt;
L’interruption V-Blank est justement là pour ça !&lt;br /&gt;
&lt;strong&gt;D’ailleurs, si vous souhaitez éteindre l’écran, il faut absolument le faire durant le V-Blank sinon vous risquez de réduire la durée de vie de votre écran !&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;interruption-v-blank&quot;&gt;Interruption V-Blank&lt;/h3&gt;

&lt;p&gt;L’interruption V-Blank permet donc de manipuler la mémoire vidéo des 3 couches mais il faut également prendre en compte une informations importante : &lt;strong&gt;Vous avez seulement 4560 cycles à partir du début du V-Blank&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cette limitation de &lt;strong&gt;4560 cycles&lt;/strong&gt; vient du fait que l’affichage ne va pas attendre la fin des instructions pour s’actualiser ! Ce qui a pour effet de bloquer l’accès à la mémoire durant l’affichage et donc durant le V-Blank si vous dépassez cette limite.&lt;br /&gt;
Donc si vous dépassez cette limite sans en tenir compte et que vous tentez d’écrire dans la mémoire vidéo, vos données ne seront pas écrites et donc pas affichées/actualisées, mais votre code continuera de s’exécuter, vous constaterez donc des trous dans votre affichage !&lt;/p&gt;

&lt;p&gt;Pour éviter cela, il faut compter les cycles ! Chaque instruction assembleur nécessite un certain nombre de cycles pour être exécutée : &lt;a href=&quot;specifications-gameboy#cpuinstructionset&quot; target=&quot;_blank&quot;&gt;Voir les instructions CPU&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Toutes les informations sont disponibles dans les spécifications : &lt;a href=&quot;specifications-gameboy#accessingvramandoam&quot; target=&quot;_blank&quot;&gt;Accessing VRAM and OAM&lt;/a&gt;&lt;br /&gt;
On remarque notamment un exemple permettant d’attendre l’accès à cette mémoire. Ce qui permet par exemple d’avoir un V-Blank de plus de &lt;strong&gt;4560 cycles&lt;/strong&gt; en découpant le code en plusieurs parties tout en attendant l’accès mémoire entre chaque partie (ou même permettre d’accéder à cette mémoire en dehors de l’interruption VBlank).&lt;br /&gt;
Dans le cas présent, nous le verrons plus bas, j’ai compté les cycles pour segmenter mon affichage en plusieurs parties.&lt;/p&gt;

&lt;p&gt;Il existe donc 3 couches pour afficher des &lt;strong&gt;tiles&lt;/strong&gt;, chacune a ses particularités :&lt;/p&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;D’une dimension de &lt;strong&gt;32x32 tiles&lt;/strong&gt;, il est principalement utilisé pour afficher le niveau du jeu grâce à sa propriété qui est d’être scrollable, c’est à dire que la zone affichée à l’écran (20x18 tiles) peut se balader sur le background.&lt;br /&gt;
De plus, le scroll dans le background est infini puisqu’il peut tourner en boucle ! Le bas est lié au haut tout comme le bord droit est lié au bord gauche.&lt;/p&gt;

&lt;p&gt;La background est stocké à partir de l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x9800&lt;/code&gt; ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x9C00&lt;/code&gt; suivant le &lt;strong&gt;bit 3&lt;/strong&gt; définit à l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF40&lt;/code&gt; : &lt;a href=&quot;specifications-gameboy#lcdcontrolregister&quot; target=&quot;_blank&quot;&gt;Voir les spécifications&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chaque octet du background correspond au numéro de la tile à afficher.&lt;/p&gt;

&lt;h3 id=&quot;window&quot;&gt;Window&lt;/h3&gt;

&lt;p&gt;Cette couche vient par dessus le background. Elle possède également une dimension de &lt;strong&gt;32x32 tiles&lt;/strong&gt; (1 octet par tile) mais n’est pas scrollable comme le background.&lt;br /&gt;
Sa propriété est de pouvoir être déplacée sur l’écran, ce qui permet par exemple de créer une boite de dialogue, un menu etc…&lt;/p&gt;

&lt;p&gt;Tout comme le background, son adresse est soit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x9800&lt;/code&gt; soit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x9C00&lt;/code&gt; dépendamment du &lt;strong&gt;bit 6&lt;/strong&gt; définit à l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF40&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sprites&quot;&gt;Sprites&lt;/h3&gt;

&lt;p&gt;Les &lt;strong&gt;sprites&lt;/strong&gt; ont la priorité d’affichage la plus haute (ils sont affichés au dessus des autres couches).&lt;br /&gt;
Il est possible d’afficher un maximum de 40 &lt;strong&gt;sprites&lt;/strong&gt; mais avec une limitation à 10 &lt;strong&gt;sprites&lt;/strong&gt; par ligne.&lt;/p&gt;

&lt;p&gt;Un &lt;strong&gt;sprite&lt;/strong&gt; est composé de 1 &lt;strong&gt;tile&lt;/strong&gt; (8x8 ou 8x16 suivant le flag), de coordonnées X et Y pour le positionner sur l’écran, ainsi que d’un flag correspondant à quelques options : &lt;a href=&quot;specifications-gameboy#vramspriteattributetableoam&quot; target=&quot;_blank&quot;&gt;VRAM Sprite Attribute Table (OAM)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il y a donc 4 octets par &lt;strong&gt;sprite&lt;/strong&gt; (Y, X, tile, flag).
Ils sont stockés à partir de l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFE00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On peut utiliser les sprites pour un très petit texte ou pour afficher les personnages dans le jeu par exemple.&lt;/p&gt;

&lt;h3 id=&quot;choix-de-laffichage-pour-ce-projet&quot;&gt;Choix de l’affichage pour ce projet&lt;/h3&gt;

&lt;p&gt;Vu la quantité d’informations à afficher, j’élimine les &lt;strong&gt;sprites&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Il reste donc &lt;strong&gt;background&lt;/strong&gt; ou &lt;strong&gt;window&lt;/strong&gt;. Les deux peuvent répondre au besoin !&lt;/p&gt;

&lt;p&gt;Le &lt;strong&gt;background&lt;/strong&gt; est très simple à manipuler, j’ai donc décidé de l’utiliser.&lt;/p&gt;

&lt;h3 id=&quot;exemple-daffichage-dun-texte&quot;&gt;Exemple d’affichage d’un texte&lt;/h3&gt;

&lt;p&gt;Voici un exemple pour afficher le texte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Press START to hash&lt;/code&gt; sur la dernière ligne de l’écran :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;strPressStart&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopStrPressStart:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopStrPressStart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;L’adresse du background commence à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x9800&lt;/code&gt;, chaque ligne du background possède &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32&lt;/code&gt; positions, le scroll est placé en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0,0&lt;/code&gt; et l’écran a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18&lt;/code&gt; lignes. On peut donc calculer l’emplacement de la dernière ligne affichée à l’écran : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x9800 + 17 * 32&lt;/code&gt; = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x9A20&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;(&lt;strong&gt;17&lt;/strong&gt; car on veut le début de la 18ème ligne et non le début de la 19ème, tout comme il faudrait mettre &lt;strong&gt;0&lt;/strong&gt; pour avoir le début de la première ligne)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Il faut évidemment spécifier la longueur du texte (&lt;strong&gt;19&lt;/strong&gt; dans le cas présent).&lt;br /&gt;
Sachant que l’écran permet d’afficher &lt;strong&gt;20&lt;/strong&gt; caractères par ligne, si le texte est plus long il faudra donc l’afficher sur plusieurs lignes.&lt;/p&gt;

&lt;h2 id=&quot;détection-des-touches&quot;&gt;Détection des touches&lt;/h2&gt;

&lt;p&gt;La lecture de l’état des boutons n’est pas compliquée mais s’avère être potentiellement instable !&lt;/p&gt;

&lt;p&gt;En effet, seuls &lt;strong&gt;4 bits&lt;/strong&gt; (0 à 3) du registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF00&lt;/code&gt; permettent de récupérer l’état des boutons.&lt;br /&gt;
Mais la GameBoy possède 8 boutons, donc ces &lt;strong&gt;4 bits&lt;/strong&gt; sont partagés suivant l’état des &lt;strong&gt;bits 4 et 5&lt;/strong&gt; comme spécifié dans la doc : &lt;a href=&quot;specifications-gameboy#joypadinput&quot; target=&quot;_blank&quot;&gt;Joypad Input&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notez bien que les &lt;strong&gt;bits 4 et 5&lt;/strong&gt; sont sélectionnés lorsqu’ils sont à &lt;strong&gt;0&lt;/strong&gt; et que les bits des boutons sont également à &lt;strong&gt;0&lt;/strong&gt; lorsque ces derniers sont appuyés.&lt;/p&gt;

&lt;p&gt;Donc, pour lire l’état des boutons, il faut procéder en deux étapes :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On définit les bits 4 et 5 dans le registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF00&lt;/code&gt; afin de spécifier quelles touches on souhaite lire&lt;/li&gt;
  &lt;li&gt;On récupère la valeur de ce même registre (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF00&lt;/code&gt;) pour lire l’état des bits 0 à 3 correspondants aux boutons&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Concernant l’instabilité que j’évoquais précédemment, elle est liée au fait que l’attribution des bits correspondants aux états des boutons n’est pas instantanée !&lt;br /&gt;
La lecture peut donc être faussée si elle est faite trop rapidement.&lt;/p&gt;

&lt;p&gt;Dans la pratique, il est donc recommandé de lire plusieurs fois le registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF00&lt;/code&gt; pour être certain de récupérer les bonnes valeurs. On peut également définir les bits 4 et 5 en amont dans le code afin d’anticiper la future lecture !&lt;/p&gt;

&lt;p&gt;Voici un exemple pour la touche &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Down&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00100000&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = 0b00100000&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;(FF00) = a&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;Test bit 3 du registre a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyDown&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;Si bit 3 != 0 : Jump notKeyDown&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;TODO : action key down&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;notKeyDown:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On définit les bits 4 et 5 du registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF00&lt;/code&gt; pour sélectionner les touches de direction (bit 4 à 0 et bit 5 à 1).&lt;/p&gt;

&lt;p&gt;Afin de bien lire la bonne valeur, on fait plusieurs lectures du registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF00&lt;/code&gt;.&lt;br /&gt;
Je n’ai pas trouvé d’informations précises sur le nombre de cycles nécessaires avant d’être vraiment certain de la lecture … à l’occasion je procèderai à quelques tests pour déterminer cela.&lt;/p&gt;

&lt;p&gt;Et enfin, on test le bit de la touche souhaitée, si il n’est pas à 0 on saute après le traitement du bouton.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dans l’optique d’optimiser le nombre d’instructions dans l’interruption VBlank, je place la gestion des touches dans la boucle principale &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;loop&lt;/code&gt; !&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;saisie-dun-texte-depuis-la-gameboy&quot;&gt;Saisie d’un texte depuis la GameBoy&lt;/h2&gt;

&lt;p&gt;Maintenant qu’on sait comment afficher du texte à l’écran et comment détecter l’appui d’une touche, on va pouvoir mettre en place le système de saisie de caractères.&lt;/p&gt;

&lt;p&gt;L’écran pouvant afficher 20 tiles sur une ligne, j’ai décidé de limiter la saisie à 20 caractères, ce qui est déjà pas mal pour tester le SHA1 !&lt;/p&gt;

&lt;h3 id=&quot;espace-mémoire-nécessaire&quot;&gt;Espace mémoire nécessaire&lt;/h3&gt;

&lt;p&gt;Voici les variables nécessaires pour réaliser la saisie d’un texte :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;VBlankTimer&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;DB&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Compteur VBlank pour avoir un timer synchronisé sur l'affichage&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;KeyLastDir&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;DB&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Dernière touche de direction appuyées&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;KeyLastBut&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;DB&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Dernier bouton appuyé&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;CharTmp&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;DB&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Caractère en cours&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;CharCount&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;DB&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Nombre de caractères déjà sélectionnés&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;CharBuffer&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Enregistrement des caractères sélectionnés&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBlankTimer&lt;/code&gt; sera nécessaire pour gérer le clignotement du caractère en cours, voir ci-dessous.&lt;/p&gt;

&lt;p&gt;Les deux variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeyLast&lt;/code&gt; permettent d’éviter l’exécution en boucle des boutons, voir ci-dessous.&lt;/p&gt;

&lt;h3 id=&quot;défilement-des-caractères&quot;&gt;Défilement des caractères&lt;/h3&gt;

&lt;p&gt;Le défilement des caractères sera géré par les touches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Up&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Down&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00100000&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = 0b00100000&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;(FF00) = a&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;b = a&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001111&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 0b00001111&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001111&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;a ^= 0b00001111&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyDirRefresh&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;;Si a != 0 : Jump notKeyDirRefresh&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;(KeyLastDir) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notKeyUp&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Jump notKeyUp&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;notKeyDirRefresh:&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;Test bit 3 de b : Down&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyDown&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;Si bit 3 != 0 : Jump notKeyDown&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;a = (KeyLastDir)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyDown&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;Si a == 4 : Jump notKeyDown&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;a = 4&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;(KeyLastDir) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = (CharTmp)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;processKeyDown&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si a &amp;gt;= 32 : Jump processKeyDown&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;a = 126&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;processKeyDown:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(CharTmp) = a&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;notKeyDown:&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;Test bit 2 de b : Up&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyUp&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;Si bit 2 != 0 : Jump notKeyUp&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;a = (KeyLastDir)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyUp&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;Si a == 3 : Jump notKeyUp&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;a = 3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;(KeyLastDir) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = (CharTmp)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;processKeyUp&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Si a &amp;lt; 127 : Jump processKeyUp&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;a = 32&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;processKeyUp:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(CharTmp) = a&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;notKeyUp:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Je commence par définir puis lire le registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xFF00&lt;/code&gt; pour les touches directionnelles (voir le chapitre précédent sur la détection des touches).&lt;/p&gt;

&lt;p&gt;Si aucune touche est appuyée je réinitialise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeyLastDir&lt;/code&gt; et je saute à la fin du traitement des touches.&lt;br /&gt;
Sinon je vérifie les deux touches (Up et Down) tout en m’assurant que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeyLastDir&lt;/code&gt; n’a pas la valeur de la touche en cours (valeur définie arbitrairement par moi même).&lt;br /&gt;
Cette vérification a pour but d’éviter une exécution en boucle car le CPU est bien plus rapide que nos doigts, il aura le temps de passer plusieurs fois sur la détection de la touche avant qu’on ait relâché le bouton !&lt;/p&gt;

&lt;p&gt;Puis j’incrémente ou décrémente la valeur de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharTmp&lt;/code&gt; tout en m’assurant de rester dans la limite des caractères que je souhaite utiliser (en l’occurrence entre 32 et 126, soit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x20&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x7E&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;validationsuppression-du-caractère&quot;&gt;Validation/Suppression du caractère&lt;/h3&gt;

&lt;p&gt;La touche &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; permettra de valider la sélection du caractère en cours, et la touche &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; supprimera le dernier caractère et permettra de le re-définir :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00010000&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = 0b00010000&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;(FF00) = a&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;a = (FF00)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;b = a&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001111&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 0b00001111&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00001111&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;a ^= 0b00001111&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyButRefresh&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;;Si a != 0 : Jump notKeyButRefresh&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastBut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;(KeyLastBut) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notKeyB&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;Jump notKeyB&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;notKeyButRefresh:&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;Test bit 0 de b : A&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyA&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;Si bit 0 != 0 : Jump notKeyA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastBut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;a = (KeyLastBut)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyA&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;Si a == 1 : Jump notKeyA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;a = 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastBut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;(KeyLastBut) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;a = (CharCount)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyA&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;Si a == 20 : Jump notKeyA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;d = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;e = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arBuffer&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = CharBuffer&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;hl += de&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;(CharCount) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = (CharTmp)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;(hl) = a&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;notKeyA:&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;Test bit 1 de b : B&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyB&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;Si bit 1 != 0 : Jump notKeyB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastBut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;a = (KeyLastBut)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyB&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;Si a == 2 : Jump notKeyB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;a = 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KeyLastBut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;(KeyLastBut) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;a = (CharCount)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;notKeyB&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;Si a == 0 : Jump notKeyB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;d = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;e = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arBuffer&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = CharBuffer&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;hl += de&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;(CharCount) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;00&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;(hl) = a&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;notKeyB:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le fonctionnement est très similaire aux touches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Up&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Down&lt;/code&gt; du chapitre précédent.&lt;/p&gt;

&lt;p&gt;La touche &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; va ajouter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharTmp&lt;/code&gt; dans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharBuffer&lt;/code&gt; en appliquant le décalage d’adresse pour le caractère en cours (en se basant sur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharCount&lt;/code&gt;), puis va incrémenter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharCount&lt;/code&gt; afin de passer au caractère suivant.&lt;/p&gt;

&lt;p&gt;La touche &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; va réinitialiser la valeur du caractère en cours dans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharBuffer&lt;/code&gt; puis décrémenter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharCount&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;affichage-et-clignotement-pour-le-caractère-en-cours&quot;&gt;Affichage et clignotement pour le caractère en cours&lt;/h3&gt;

&lt;p&gt;Pour mettre en valeur le caractère en cours, une pratique courante est de le faire clignoter.&lt;br /&gt;
Pour que le clignotement soit bien synchronisé avec la fréquence d’affichage, j’ai décidé d’ajouter un compteur qui est incrémenté à chaque exécution de VBlank.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VBlankTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;a = (VBlankTimer)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VBlankTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;(VBlankTimer) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;e = a&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9800&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;hl = $9800&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;d = 20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arBuffer&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = CharBuffer&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;displayCharBuffer:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;d -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layCharBuffer&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;;Si d != 0 : Jump displayCharBuffer&lt;/span&gt;

  
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9800&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;hl = $9800&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;a = (CharCount)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;b = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;c = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;hl += bc&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;Test bit 4 de e&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;endBlink&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;Si bit 4 == 0 : Jump endBlink&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arTmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = (CharTmp)&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;endBlink:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;(hl) = a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A chaque passage dans VBlank j’incrémente &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VBlankTimer&lt;/code&gt; puis j’actualise l’affichage du contenu de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharBuffer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Afin d’afficher la &lt;strong&gt;tile&lt;/strong&gt; au bon emplacement, j’utilise la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharCount&lt;/code&gt; pour décaler l’adresse mémoire du background au bon endroit.&lt;/p&gt;

&lt;p&gt;Après quelques tests, le bit 4 du compteur me semble être le meilleur compris pour la vitesse de clignotement. Si il est à 0 j’affiche une &lt;strong&gt;tile&lt;/strong&gt; vide, sinon j’affiche le caractère en cours.&lt;/p&gt;

&lt;h2 id=&quot;intégration-du-code-sha1&quot;&gt;Intégration du code SHA1&lt;/h2&gt;

&lt;p&gt;Il est temps d’intégrer l’algorithme SHA1 que j’ai réalisé dans mon précédent article : &lt;a href=&quot;implementation-sha1-sur-gameboy&quot; target=&quot;_blank&quot;&gt;Implémentation SHA1 sur GameBoy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Un simple copier coller des variables et du code nécessaire au fonctionnement de l’algo et c’est déjà quasiment fini.&lt;/p&gt;

&lt;h3 id=&quot;construction-du-bloc-sha1&quot;&gt;Construction du bloc SHA1&lt;/h3&gt;

&lt;p&gt;Un point que j’avais pas implémenté et qui est nécessaire ici, c’est la génération automatique du bloc SHA1.&lt;br /&gt;
En effet, pour fonctionner, le SHA1 fait ses opérations sur des blocs de 64 octets, mais j’ai déjà expliqué cela dans mon précédent article : &lt;a href=&quot;implementation-sha1-sur-gameboy#construction-de-la-chaine-à-hacher-blocs-sha1&quot; target=&quot;_blank&quot;&gt;Construction de la chaine à hacher (blocs SHA1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dans le cas présent, la saisie étant limitée à 20 caractères, le bloc SHA1 est très simple à générer :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;processSha1:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Bl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ock&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;hl = Block&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arBuffer&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = CharBuffer&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;a = (CharCount)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopBufferBlockEnd&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;;Si a == 0 : Jump loopBufferBlockEnd&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;e = a&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopBufferBlock:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;e -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopBufferBlock&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;;Si e != 0 : Jump loopBufferBlock&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopBufferBlockEnd:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;a = $80&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;a = (CharCount)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;e = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;a = 62&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a -= e&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;e = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopInitBlock:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;e -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopInitBlock&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si e != 0 : Jump loopInitBlock&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;a = (CharCount)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sha1&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;a = 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;(DisplayHash) = a&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Je copie le contenu de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharBuffer&lt;/code&gt; dans &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Block&lt;/code&gt; en me basant sur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharCount&lt;/code&gt; pour savoir combien de caractères je dois copier (sachant qu’il peut aussi y avoir 0 caractères).&lt;/p&gt;

&lt;p&gt;Puis je fini la construction du bloc avec le caractère &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\x80&lt;/code&gt; suivi du remplissage des &lt;strong&gt;null bytes&lt;/strong&gt; et enfin le dernier caractère représentant la longueur de la chaine.&lt;/p&gt;

&lt;p&gt;Après avoir appelé le calcul du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1&lt;/code&gt; je définit ma variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisplayHash&lt;/code&gt; à &lt;strong&gt;1&lt;/strong&gt; afin de déclencher l’affichage lors du prochain VBlank.&lt;/p&gt;

&lt;h3 id=&quot;affichage-du-hash&quot;&gt;Affichage du hash&lt;/h3&gt;

&lt;p&gt;On peut désormais passer à l’affichage du hash SHA1.&lt;br /&gt;
Puisqu’on doit manipuler la mémoire vidéo il faut faire cela dans le VBlank, ce qui implique de prendre en compte la limitation de &lt;strong&gt;4560 cycles&lt;/strong&gt; comme expliqué dans le chapitre &lt;a href=&quot;#interruption-v-blank&quot;&gt;Interruption V-Blank&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;a = (DisplayHash)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tryDisplayHash&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si a != 1 : Jump tryDisplayHash&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;(DisplayHash) = a&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9860&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;hl = $9860&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;d = 20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopCleanText:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;d -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopCleanText&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9860&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;hl = $9860&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arBuffer&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = CharBuffer&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;a = (CharCount)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHashEnd&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si a == 0 : Jump displayHashEnd&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;d = a&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopDisplayText:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;d -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopDisplayText&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;;Si d != 0 : Jump loopDisplayText&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHashEnd&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Jump displayHashEnd&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;tryDisplayHash:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHashEnd&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si a != 2 : Jump displayHashEnd&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C0&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;hl = $98C0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateA&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;bc = StateA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;d = 4&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;e = 5&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loopDisplayHash&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;Jump loopDisplayHash&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopDisplayHash2:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;Stack bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;d = 4&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;bc = 24&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;hl += bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;UnStack bc&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopDisplayHash:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHashHex1&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si a &amp;lt; 10 : Jump displayHashHex1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a += 7&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;displayHashHex1:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;a += 48&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 15&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHashHex2&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si a &amp;lt; 10 : Jump displayHashHex2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a += 7&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;displayHashHex2:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;a += 48&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;d -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopDisplayHash&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;;Si d != 0 : Jump loopDisplayHash&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;e -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopDisplayHash2&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;;Si e != 0 : Jump loopDisplayHash2&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Disp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layHash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;(DisplayHash) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;endVBlank&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;Jump endVBlank&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;displayHashEnd:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afin de séparer l’affichage en plusieurs parties (pour ne pas dépasser le nombre de cycles) j’utilise la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisplayHash&lt;/code&gt; pour savoir quelle partie je dois afficher.&lt;br /&gt;
Si mes calculs sont bons, je dépasse jamais la limite des &lt;strong&gt;4560 cycles&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;Si &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisplayHash&lt;/code&gt; est égal à &lt;strong&gt;1&lt;/strong&gt; j’incrémente sa valeur (pour le prochain passage dans VBlank) puis je génère l’affichage du texte en commençant par remettre toutes les tiles de la ligne à &lt;strong&gt;0&lt;/strong&gt; puis en affichant le contenu de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CharBuffer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Si &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisplayHash&lt;/code&gt; est égal à &lt;strong&gt;2&lt;/strong&gt; alors je procède à l’affichage du hash sur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt; lignes de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 * 2&lt;/code&gt; caractères (pour une représentation hexadécimale).&lt;br /&gt;
Je parcours donc les octets en commençant par &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateA&lt;/code&gt;, puis tous les 4 octets je passe à la ligne suivante (les 5 variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt; se suivent dans la mémoire, il suffit donc juste d’incrémenter l’adresse depuis le point de départ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateA&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Pour avoir l’affichage en hexadécimal, je récupère dans un premier temps les &lt;strong&gt;4 bits&lt;/strong&gt; de poids fort (via &lt;strong&gt;4 décalages vers la droite&lt;/strong&gt;).&lt;br /&gt;
Si la valeur est supérieure à &lt;strong&gt;9&lt;/strong&gt; c’est qu’il s’agit d’une lettre auquel cas j’ajoute &lt;strong&gt;7&lt;/strong&gt; en plus de &lt;strong&gt;48&lt;/strong&gt;, ainsi je fais correspondre avec le bon caractère (le décalage de &lt;strong&gt;7&lt;/strong&gt; vient des &lt;strong&gt;7&lt;/strong&gt; caractères entre les chiffres et les lettres dans la &lt;a href=&quot;https://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange&quot; target=&quot;_blank&quot;&gt;table ASCII&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Le principe est identique pour les &lt;strong&gt;4 bits&lt;/strong&gt; de poids faible, je les récupère avec un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and 0b00001111&lt;/code&gt; puis je fais exactement les mêmes opérations que pour les 4 bits précédents.&lt;/p&gt;

&lt;p&gt;Pour finir, je repasse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DisplayHash&lt;/code&gt; à &lt;strong&gt;0&lt;/strong&gt; afin de permettre de relancer un nouveau calcul SHA1 et donc un nouvel affichage.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Au début j’avais un doute sur la nécessité de faire un article sur ce sujet.&lt;br /&gt;
Puis quand j’ai commencé à me renseigner et à faire mes tests, j’ai trouvé ça vraiment très intéressant et il aurait été dommage de ne pas partager tout ça !&lt;/p&gt;

&lt;p&gt;Même si ça semble très simple, il y a assez de possibilités et de subtilités pour justifier la rédaction d’un article.&lt;/p&gt;

&lt;p&gt;Comme d’habitude, il y a encore pas mal d’optimisations possibles et je suis preneur de vos propositions !&lt;/p&gt;

&lt;p&gt;Et encore une fois, un grand merci à &lt;a href=&quot;https://entropyqueen.github.io/&quot; target=&quot;_blank&quot;&gt;entropyQueen&lt;/a&gt; pour l’idée du projet et pour le test de mon code en conditions réelles sur sa GameBoy !&lt;br /&gt;
&lt;em&gt;(Hé oui, je n’ai pas encore le matériel pour tester sur ma GB, je me contente de l’émulateur)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;sources-et-inspirations&quot;&gt;Sources et inspirations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Elrindel/SHA1-GUI-GameBoy&quot; target=&quot;_blank&quot;&gt;Code du projet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Elrindel/GameBoy-Tiles-Fonts&quot; target=&quot;_blank&quot;&gt;Polices d’écriture GB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;implementation-sha1-sur-gameboy&quot; target=&quot;_blank&quot;&gt;Mon premier article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;specifications-gameboy&quot; target=&quot;_blank&quot;&gt;Spécifications GameBoy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://entropyqueen.github.io/&quot; target=&quot;_blank&quot;&gt;Blog d’entropyQueen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://furrtek.free.fr/?a=gbasm&quot; target=&quot;_blank&quot;&gt;Article de Furrtek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.flozz.fr/2019/09/18/developpement-gameboy-1bis-re-hello-world/&quot; target=&quot;_blank&quot;&gt;Suite d’articles de FLOZz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 May 2020 14:45:45 +0200</pubDate>
        <link>https://elrindel.github.io/suite-sha1-sur-gameboy-interface-graphique</link>
        <guid isPermaLink="true">https://elrindel.github.io/suite-sha1-sur-gameboy-interface-graphique</guid>
        
        
        <category>gameboy</category>
        
      </item>
    
      <item>
        <title>Implémentation SHA1 sur GameBoy</title>
        <description>&lt;p&gt;Suite à une petite discussion avec &lt;a href=&quot;https://entropyqueen.github.io/&quot; target=&quot;_blank&quot;&gt;entropyQueen&lt;/a&gt; concernant ses projets sur GameBoy, je me suis lancé dans l’implémentation de l’algorithme de hachage SHA1 sur GameBoy !&lt;/p&gt;

&lt;p&gt;C’était une première pour moi puisque j’avais encore jamais fait de programmation sur GB (et très peu fait d’assembleur également). Dans cet article je vais donc vous partager mon apprentissage en essayant d’expliquer au mieux mes recherches/analyses/réflexions pour avancer sur ce projet !&lt;/p&gt;

&lt;p&gt;Les sources de ce projet sont disponibles ici : &lt;a href=&quot;https://github.com/Elrindel/SHA1-GameBoy&quot; target=&quot;_blank&quot;&gt;SHA1 GameBoy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;programmation-sur-gameboy&quot;&gt;Programmation sur GameBoy&lt;/h2&gt;

&lt;p&gt;Ma première étape a été de me renseigner sur les différentes méthodes possibles de programmation sur GB.&lt;/p&gt;

&lt;p&gt;Il m’est vite apparu que la seule solution réellement intéressante est l’assembleur !&lt;/p&gt;

&lt;p&gt;On trouve d’ailleurs assez facilement un certain nombre d’articles qui traitent très bien ce sujet. Dans mon cas, je me suis arrêté sur l’article de &lt;a href=&quot;http://furrtek.free.fr/?a=gbasm&quot; target=&quot;_blank&quot;&gt;Furrtek&lt;/a&gt; qui a le mérite d’être clair et assez complet pour débuter dans le domaine.&lt;/p&gt;

&lt;h3 id=&quot;spécifications-techniques-de-la-gameboy&quot;&gt;Spécifications techniques de la GameBoy&lt;/h3&gt;

&lt;p&gt;Il existe plusieurs versions de la documentation mais globalement le contenu est toujours le même.&lt;br /&gt;
Afin de m’assurer de ne pas perdre ce document (comme c’est le cas avec le lien fourni par Furrtek), j’ai préféré en faire une copie ici sur mon blog : &lt;a href=&quot;specifications-gameboy&quot; target=&quot;_blank&quot;&gt;Spécifications GameBoy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ce document donne toutes les indications nécessaires pour utiliser l’ensemble des fonctionnalités de la GB !&lt;/p&gt;

&lt;p&gt;Je ne rentrerai pas dans les détails (sauf si besoin pour certains points spécifiques), des articles comme celui de Furrtek font déjà très bien le travail.&lt;/p&gt;

&lt;p&gt;Pour ce projet j’ai utilisé l’émulateur BGB. J’avoue ne pas avoir testé les autres étant donné que celui-ci répondait parfaitement à mes besoins.&lt;/p&gt;

&lt;h3 id=&quot;assembleur-wla-dx&quot;&gt;Assembleur WLA DX&lt;/h3&gt;

&lt;p&gt;Comme le suggère Furrtek dans son article, je vais utiliser l’assembleur &lt;a href=&quot;https://github.com/vhelin/wla-dx&quot; target=&quot;_blank&quot;&gt;WLA-DX&lt;/a&gt;.&lt;br /&gt;
Suivez les instructions de compilations indiquées dans le &lt;a href=&quot;https://github.com/vhelin/wla-dx/blob/master/README.md&quot; target=&quot;_blank&quot;&gt;readme&lt;/a&gt; ou &lt;a href=&quot;http://www.villehelin.com/wla.html&quot; target=&quot;_blank&quot;&gt;téléchargez une version déjà compilée&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pour simplifier l’utilisation, j’ai ajouté le dossier &lt;strong&gt;binaries&lt;/strong&gt; à ma variable d’environnement &lt;strong&gt;PATH&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Voici un petit script que j’ai nommé &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wla-gb-build&lt;/code&gt; et qui permet de faciliter l’utilisation de &lt;strong&gt;WLA-DX&lt;/strong&gt; (je l’ai ajouté dans le dossier &lt;strong&gt;binaries&lt;/strong&gt;) :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;objects]&amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/linkfile&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.o&amp;gt;&amp;gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/linkfile&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.o&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.o&quot;&lt;/span&gt;

wla-gb &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.o&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
wlalink &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/linkfile&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileDir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.gb&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ainsi il suffit d’exécuter la commande &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wla-gb-build mon_jeu.s&lt;/code&gt; pour obtenir le fichier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mon_jeu.gb&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;algorithme-sha1&quot;&gt;Algorithme SHA1&lt;/h2&gt;

&lt;p&gt;Maintenant que je sais comment créer et tester des programmes GB, je peux m’attaquer à la plus grosse partie, l’algorithme SHA1 !&lt;/p&gt;

&lt;p&gt;La solution qui me semble la plus évidente consiste à trouver le code de cet algorithme en C, ou même directement en assembleur x86, puis de voir comment je peux l’adapter avec les instructions disponibles en z80 (enfin, la version GB qui est légèrement différente d’un véritable z80).&lt;/p&gt;

&lt;p&gt;J’ai donc trouvé mon bonheur sur ce site : &lt;a href=&quot;https://www.nayuki.io/page/fast-sha1-hash-implementation-in-x86-assembly&quot; target=&quot;_blank&quot;&gt;https://www.nayuki.io/page/fast-sha1-hash-implementation-in-x86-assembly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus particulièrement leur implémentation en version &lt;strong&gt;fast&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;opérations-32-bits-sur-cpu-8-bits&quot;&gt;Opérations 32 bits sur CPU 8 bits&lt;/h3&gt;

&lt;p&gt;En étudiant un peu l’assembleur de la version &lt;strong&gt;fast&lt;/strong&gt; je remarque, sans surprise, un certain nombre d’instructions basées sur une architecture 32 bits.&lt;/p&gt;

&lt;p&gt;Les instructions en question sont les suivantes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movl&lt;/code&gt; Ecrit un entier 32 bits à une adresse en mémoire&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;andl&lt;/code&gt; Opération logique &lt;strong&gt;and&lt;/strong&gt; entre 2 entiers 32 bits&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orl&lt;/code&gt;  Opération logique &lt;strong&gt;or&lt;/strong&gt; entre 2 entiers 32 bits&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xorl&lt;/code&gt; Opération logique &lt;strong&gt;xor&lt;/strong&gt; entre 2 entiers 32 bits&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addl&lt;/code&gt; Additionne 2 entiers 32 bits&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll&lt;/code&gt; Rotation des bits vers la gauche sur un entier 32 bits (les bits qui sortent re-rentrent par la droite)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concernant l’instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bswapl&lt;/code&gt; (qui permet d’inverser l’ordre des 4 octets d’un entier 32 bits), elle n’est pas nécessaire en z80 (pour cet algorithme en tout cas), voir l’implémentation de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addl&lt;/code&gt; ci-dessous pour plus de détails.&lt;/p&gt;

&lt;p&gt;Désormais il faut trouver un moyen de convertir ces instructions 32 bits pour pouvoir les utiliser sur un CPU 8 bits !&lt;/p&gt;

&lt;p&gt;Afin de simplifier l’utilisation, je choisis arbitrairement que le registre &lt;strong&gt;BC&lt;/strong&gt; correspond à la source, et le registre &lt;strong&gt;HL&lt;/strong&gt; à la destination.&lt;/p&gt;

&lt;h4 id=&quot;instruction-movl&quot;&gt;Instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movl&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Cette instruction est probablement la plus simple à réaliser puisqu’il s’agit de déplacer 4 octets d’une adresse vers une autre.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;movl:&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;hl=bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;e = 4&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopmovl:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;e -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopmovl&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;Si e != 0 : Jump loopmovl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La valeur pointée par le registre &lt;strong&gt;BC&lt;/strong&gt; est insérée dans le registre &lt;strong&gt;A&lt;/strong&gt; qui est ensuite insérée à l’adresse pointée par le registre &lt;strong&gt;HL&lt;/strong&gt;.&lt;br /&gt;
Les adresses pointées par &lt;strong&gt;HL&lt;/strong&gt; et &lt;strong&gt;BC&lt;/strong&gt; sont incrémentées afin de passer à l’octet suivant. Ces opérations sont répétées 4 fois.&lt;/p&gt;

&lt;h4 id=&quot;instructions-andl-orl-xorl&quot;&gt;Instructions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;andl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xorl&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Le principe est très similaire à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;movl&lt;/code&gt;, il faut juste réaliser une opération supplémentaire (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xor&lt;/code&gt;) sur chaque octet.&lt;/p&gt;

&lt;p&gt;Exemple pour l’instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;andl:&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;hl&amp;amp;=bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;e = 4&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopandl:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;e -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopandl&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;Si e != 0 : Jump loopandl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;instruction-addl&quot;&gt;Instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addl&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Voilà enfin un peu de challenge !! Réaliser une addition de deux entiers 32 bits avec seulement des instructions sur 8 bits.&lt;br /&gt;
A première vue il est légitime de penser que c’est compliqué, mais en réalité ça ne l’est pas !&lt;/p&gt;

&lt;p&gt;L’instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; permet d’additionner deux entiers 8 bits, et si 8 bits ne suffisent pas pour stocker le résultat, alors il y aura une retenue qu’on peut intercepter via le flag &lt;strong&gt;c&lt;/strong&gt; (Carry Flag) !&lt;/p&gt;

&lt;p&gt;On peut donc facilement étendre l’addition à plusieurs octets en utilisant le flag &lt;strong&gt;c&lt;/strong&gt; pour vérifier si il est nécessaire d’appliquer la retenue sur l’octet suivant !&lt;/p&gt;

&lt;p&gt;A ce niveau il faut être cohérent sur l’ordre des octets. Le résultat ne pourra pas être le même si on va de l’octet 1 à 4 (little endian) ou de l’octet 4 à 1 (big endian). Pour simplifier et éviter d’implémenter l’instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bswapl&lt;/code&gt; j’ai décidé de partir sur l’ordre big endian.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;addl:&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;hl+=bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;bc += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;d = 5&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addlstart&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;Jump addlstart&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;addlnext:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack de&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl -= 1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;addlstart:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;d -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;addlend&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;Si d == 0 : Jump addlend&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;a = (bc)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;bc -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack de&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a += (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;(hl) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;addlnext&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;Si a+(hl) &amp;lt; 256 : Jump addlnext (si pas de retenue)&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;addlnc:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;d -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;addlnext&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Si d == 0 : Jump addlnext (si on est sur le dernier octet)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;(hl) += 1 (on applique la retenue)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;addlnext&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;Si (hl) != 0 : Jump addlnext&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addlnc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;Sinon Jump addlnc (on fait suivre la retenue sur l'octet suivant)&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;addlend:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour commencer il faut ajouter 3 aux registres &lt;strong&gt;HL&lt;/strong&gt; et &lt;strong&gt;BC&lt;/strong&gt; afin de commencer le traitement sur les bons octets, puis je commence les additions octet par octet tout en appliquant bien la retenue aux octets suivants.&lt;/p&gt;

&lt;p&gt;Je sauvegarde les registres &lt;strong&gt;HL&lt;/strong&gt; et &lt;strong&gt;DE&lt;/strong&gt; sur la pile (Stack) afin de pouvoir procéder aux éventuels applications de retenues sans pour autant perdre le compte (puisque je dois décrémenter &lt;strong&gt;D&lt;/strong&gt; et &lt;strong&gt;HL&lt;/strong&gt; pour gérer correctement les retenues) puis je rétablis &lt;strong&gt;HL&lt;/strong&gt; et &lt;strong&gt;DE&lt;/strong&gt; pour le traitement du prochain octet (&lt;strong&gt;addlnext&lt;/strong&gt;).&lt;/p&gt;

&lt;h4 id=&quot;instruction-roll&quot;&gt;Instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;On monte encore d’un cran en terme de challenge !! Je n’ai pas encore réussi à implémenter un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll&lt;/code&gt; générique et j’ai une doute sur la pertinence de le faire étant donné la complexité d’une telle opération comparé au besoin pour ce projet.&lt;/p&gt;

&lt;p&gt;En analysant l’algorithme SHA1 on constate que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll&lt;/code&gt; est utilisé seulement avec 3 décalages différents (1, 5 et 30). J’ai donc décidé de créer ces 3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll&lt;/code&gt; différents sans chercher à faire une version générique.&lt;br /&gt;
Pour cela j’ai posé sur papier chacun des 3 décalages afin de voir les correspondances des bits entre chaque octet, et ainsi pouvoir le retranscrire en assembleur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Je suis cependant curieux/preneur de toutes solutions génériques ou de toutes optimisations de mon implémentation actuelle !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Voici le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll5&lt;/code&gt; en exemple :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;roll5:&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;hl=roll(bc,5)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack de = hl&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl = bc&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;b = 3&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;looproll5:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = (hl), hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;c &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;c &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;c &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;a |= c&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;(de) = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;de += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;b -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looproll5&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si b != 0 : Jump looproll5&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ldd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;a = (hl), hl -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a &amp;lt;&amp;lt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;c &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;c &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;srl&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;c &amp;gt;&amp;gt;= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;a |= c&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;(de) = a&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Il s’agit donc de réaliser les bons &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; (décalages) sur les bons octets puis de faire un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt; pour fusionner les bits.&lt;/p&gt;

&lt;p&gt;Le principe est identique pour les 3 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll&lt;/code&gt; (1, 5 et 30) mais avec les bons décalages et les bonnes correspondances pour chacun.&lt;/p&gt;

&lt;h3 id=&quot;espace-mémoire-nécessaire-variables&quot;&gt;Espace mémoire nécessaire (variables)&lt;/h3&gt;

&lt;p&gt;Voici les différentes variables qui seront nécessaires au bon fonctionnement de l’algo :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;Step&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;DB&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;C000      : Compteur de rounds&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;StateA&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C001-C004 : SHA1 A en cours&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;StateB&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C005-C008 : SHA1 B en cours&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;StateC&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C009-C00C : SHA1 C en cours&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;StateD&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C00D-C010 : SHA1 D en cours&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;StateE&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C011-C014 : SHA1 E en cours&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;StateT&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C015-C018 : Temporaire pour les opérations sur les State&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;RollT&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C019-C01C : Temporaire pour certaines opérations &lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;RoundK&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C01D-C020 : SHA1 K du round en cours&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;Block&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;C021-C060 : SHA1 Block (message à hacher)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;Schedule&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;C061-C0A0 : Temporaire pour les opérations sur Block&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;InitA&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C0A1-C0A5 : Sauvegarde SHA1 A à l'initialisation&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;InitB&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C0A6-C0A9 : Sauvegarde SHA1 B à l'initialisation&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;InitC&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C0AA-C0AD : Sauvegarde SHA1 C à l'initialisation&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;InitD&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C0AE-C0B1 : Sauvegarde SHA1 D à l'initialisation&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;InitE&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C0B2-C0B5 : Sauvegarde SHA1 E à l'initialisation&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;Reg1&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C0B6-C0B7 : Registre 1&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;Reg2&lt;/span&gt;      &lt;span class=&quot;nb&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;C0B8-C0B9 : Registre 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Total :&lt;/strong&gt; 185 octets&lt;/p&gt;

&lt;p&gt;Les variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateA&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateE&lt;/code&gt; contiennent le hash SHA1 en cours de calcul, le hash final sera donc dans ces variables également.&lt;br /&gt;
Le hash correspond donc aux 20 octets de l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C001&lt;/code&gt; à l’adresse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C014&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reg1&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reg2&lt;/code&gt; permettent de combler le faible nombre de registres disponibles sur la GB (seulement 3 registres 16 bits), ils servent donc de stockage d’adresse 16 bits.&lt;br /&gt;
Ils sont nécessaires pour gérer la rotation automatique des 5 variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt; à chaque round (voir le chapitre suivant).&lt;br /&gt;
Sans eux il est possible de faire cette rotation en utilisant directement la pile (stack) mais il serait alors obligatoire de désactiver les interruptions de la GameBoy afin d’éviter d’avoir une interruption au mauvais moment qui viendrait écraser certaines données sur la pile : &lt;a href=&quot;specifications-gameboy#interrupts&quot; target=&quot;_blank&quot;&gt;Voir la documentation sur les interruptions&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;initialisation-sha1&quot;&gt;Initialisation SHA1&lt;/h3&gt;

&lt;p&gt;L’initialisation SHA1 consiste simplement à définir les valeurs des 5 états (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateA&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateE&lt;/code&gt;), il s’agit du vecteur d’initialisation du SHA1 par défaut :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;sha1:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;Init StateA = 0x67452301&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;;Init StateB = 0xEFCDAB89&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EF&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;;Init StateC = 0x98BADCFE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;;Init StateD = 0x10325476&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;;Init StateE = 0xC3D2E1F0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;D2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;F0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;sha1next:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;(Step) = 0&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;InitA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;InitA = StateA&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;InitB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;InitB = StateB&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;InitC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;InitC = StateC&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;InitD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;InitD = StateD&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;InitE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;InitE = StateE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cet algorithme procède au calcul du hash SHA1 par blocs de &lt;strong&gt;64 octets&lt;/strong&gt; (voir le chapitre sur la construction de la chaine à hacher pour plus d’informations).&lt;/p&gt;

&lt;p&gt;Il peut évidemment arriver qu’on ait besoin d’obtenir le hash de chaines bien plus longues que &lt;strong&gt;64 octets&lt;/strong&gt;, c’est pourquoi il y a un second point de départ qui permet de ne pas réinitialiser les états du SHA1 en cours, il s’agit de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1next&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;initialisation-dun-round&quot;&gt;Initialisation d’un round&lt;/h3&gt;

&lt;p&gt;A chaque round on constate deux changements, à savoir l’incrémentation du compteur de rounds (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step&lt;/code&gt;) ainsi qu’une rotation des arguments.&lt;br /&gt;
Pour le round &lt;strong&gt;0&lt;/strong&gt;, les arguments sont dans l’ordre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A, B, C, D, E&lt;/code&gt;, puis au round suivant on constate une rotation : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;E, A, B, C, D&lt;/code&gt;, puis &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D, E, A, B, C&lt;/code&gt; et ainsi de suite pour les 80 rounds.&lt;/p&gt;

&lt;p&gt;Je commence donc par initialiser le tout premier ordre :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack : StateE =&amp;gt; ArgE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack : StateD =&amp;gt; ArgD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack : StateC =&amp;gt; ArgC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack : StateB =&amp;gt; ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack : StateA =&amp;gt; ArgA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initRound0&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;;Jump initRound0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;J’utilise la pile afin de manipuler plus facilement ces valeurs. Le dernier entré est le premier sorti, c’est pour cela que je &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateE&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateA&lt;/code&gt; et non l’inverse.&lt;br /&gt;
Vu qu’il s’agit de l’ordre pour le round &lt;strong&gt;0&lt;/strong&gt; je jump directement à cette étape (voir le chapitre sur le round 0 ci-dessous).&lt;/p&gt;

&lt;p&gt;Ensuite Il faut donc gérer la rotation des arguments pour les prochains rounds :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;loopRound:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;SP = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Reg1&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Reg1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;de = sp[0] = ArgA, sp = 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a = d&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a = e&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;de = sp[2] = ArgB, sp = 4&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a = d&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a = e&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;de = sp[4] = ArgC, sp = 6&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl = sp[6] = ArgD, sp = 8&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;bc = sp[8] = ArgE, sp = 10&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;sp = 8, sp[8] = hl = D&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;sp = 6, sp[6] = de = C&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Reg2&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Reg2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;d = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;e = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;sp = 4, sp[4] = de = Reg2 = ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Reg1&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Reg1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;d = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;e = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;sp = 2, sp[2] = de = Reg1 = ArgA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;sp = 0, sp[0] = bc = ArgE&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;a = (Step)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;(Step) = a&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopRound0a&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si Step &amp;lt; 16: Jump loopRound0a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopRound0b&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si Step &amp;lt; 20: Jump loopRound0b&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;initRound1&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si Step == 20: Jump initRound1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopRound1&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si Step &amp;lt; 40: Jump loopRound1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;initRound2&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si Step == 40: Jump initRound2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopRound2&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si Step &amp;lt; 60: Jump loopRound2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;initRound3&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si Step == 60: Jump initRound3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;loopRound3&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Si Step &amp;lt; 80: Jump loopRound3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loopRoundEnd&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;Sinon Jump loopRoundEnd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afin de simplifier les commentaires je pars du principe que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP&lt;/code&gt; vaut 0, ce n’est évidemment pas le cas en réalité !&lt;/p&gt;

&lt;p&gt;A ce niveau j’ai plusieurs possibilités pour faire la rotation.&lt;br /&gt;
Dans un premier temps j’avais réalisé cela à base de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt; et de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; tout en jouant avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP&lt;/code&gt; pour atteindre le bon emplacement. Mais cette solution n’était pas correcte car incompatible avec les interruptions GB !&lt;br /&gt;
En effet, lors d’une interruption, la GameBoy va mettre en “pause” le code en cours d’exécution et faire l’équivalent d’un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; vers le code de l’interruption (avec une étape en plus cependant). Cela a pour effet d’ajouter 2 adresses de retour sur la pile (pour les &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; en fin d’interruption).&lt;br /&gt;
De ce fait, si je tente de faire une rotation en me déplaçant directement dans la pile et qu’une interruption intervient en même temps, alors je verrai mes valeurs écrasées par ces adresses de retour.&lt;/p&gt;

&lt;p&gt;Pour éviter cela, j’ai ajouté deux variables (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reg1&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reg2&lt;/code&gt;) qui me servent de registre tampon en complément des 3 registres 16 bits de la GB. Ainsi je peux totalement vider la pile des 5 arguments puis la reconstruire proprement sans risquer de perdre des valeurs !&lt;/p&gt;

&lt;p&gt;Ensuite j’incrémente &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Step&lt;/code&gt; et je fais des simples comparaisons pour savoir quel round lancer.&lt;/p&gt;

&lt;h3 id=&quot;round-0a-et-roundtail&quot;&gt;Round 0a et roundtail&lt;/h3&gt;

&lt;p&gt;Initialisation du round &lt;strong&gt;0&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;initRound0:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;Init RoundK ROUND0 0x5A827999&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RoundK&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = RoundK&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x5A&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x82&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x79&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x99&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopRound0a:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;round0a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loopRound&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopRound0b:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;round0b&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loopRound&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On définit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RoundK&lt;/code&gt; lors de l’initialisation du round &lt;strong&gt;0&lt;/strong&gt; puis on appel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0a&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;round0a:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;a = (Step)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;b = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;c = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Bl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ock&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = Block&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;hl += bc : Block[Step * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Schedule&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;hl = Schedule&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;hl += bc : Schedule[Step * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack bc = Block[Step * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;Schedule[Step * 4] = Block[Step * 4]&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack bc = Schedule[Step * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = Stack+10 = ArgE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;e = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;d = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;de&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack de&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl = de&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;ArgE += Schedule[Step * 4]&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;round0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Il n’y a pas d’instruction pour réaliser directement une multiplication sur GB, cependant, un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift left&lt;/code&gt; revient à multiplier par deux, je le fais donc deux fois afin de multiplier par 4.&lt;/p&gt;

&lt;p&gt;Pour atteindre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArgE&lt;/code&gt; j’utilise le registre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP&lt;/code&gt; sachant que j’ai construit la pile juste avant, je peux donc récupérer l’argument souhaité. Voici d’ailleurs à quoi ressemble la pile à ce moment :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP+0&lt;/code&gt; = Adresse de retour&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP+2&lt;/code&gt; = ArgA&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP+4&lt;/code&gt; = ArgB&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP+6&lt;/code&gt; = ArgC&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP+8&lt;/code&gt; = ArgD&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SP+10&lt;/code&gt; = ArgE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0&lt;/code&gt; correspond à la partie commune entre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0a&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0b&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;round0:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+6 = ArgC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT = ArgC&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+8 = ArgD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xorl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT ^= ArgD&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+4 = ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;andl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT &amp;amp;= ArgB&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+6 = ArgD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xorl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT ^= ArgD&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roundtail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0&lt;/code&gt; étant atteint via un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt;, il n’y a pas d’adresse de retour en plus sur la pile, ça ne change donc pas les accès aux arguments.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt; est utilisé comme variable temporaire pour réaliser les calculs tout au long du round.&lt;/p&gt;

&lt;p&gt;Je fais un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; et non un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; pour atteindre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roundtail&lt;/code&gt; car il est toujours appelé en fin de round, autant se servir du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roundtail&lt;/code&gt; et ainsi ne pas décaler la pile avec un autre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; (les arguments restent donc accessibles avec la même offset sur SP).&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;roundtail:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+4 = ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;RollT = ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl = ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;bc = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roll30&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;ArgB = roll30(RollT)&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = Stack+10 = ArgE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = ArgE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl = bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;ArgE += StateT&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl = ArgE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RoundK&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = RoundK&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;ArgE += RoundK&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+2 = ArgA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roll5&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;RollT = roll5(ArgA)&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = Stack+10 = ArgE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl = bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;bc = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;ArgE += RollT&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RollT&lt;/code&gt; est utilisé comme variable temporaire pour réaliser les opérations &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roll&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;round-0b-et-roundschedule&quot;&gt;Round 0b et roundschedule&lt;/h3&gt;

&lt;p&gt;Les rounds &lt;strong&gt;0a&lt;/strong&gt; et &lt;strong&gt;0b&lt;/strong&gt; sont assez similaires et partagent la même valeur de &lt;strong&gt;K&lt;/strong&gt;, ils ont donc la même initialisation ainsi qu’une partie de code en commun (voir ci-dessus pour l’initialisation du round).&lt;/p&gt;

&lt;p&gt;Code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0b&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;round0b:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roundschedule&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;round0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On a déjà vu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0&lt;/code&gt; ci-dessus puisqu’il s’agit du même code que pour &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Concernant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roundschedule&lt;/code&gt;, il sera utile pour tous les rounds excepté &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round0a&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;roundschedule:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;a = (Step)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a -= 3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 15&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;b = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;c = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Schedule&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;hl = Schedule&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;hl += bc : Schedule[(Step - 3) * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack bc = hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT = Schedule[(Step - 3) * 4]&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;a = (Step)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a -= 8&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 15&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;b = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;c = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Schedule&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;hl = Schedule&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;hl += bc : Schedule[(Step - 8) * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack bc = hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xorl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT ^= Schedule[(Step - 8) * 4]&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;a = (Step)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a -= 14&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 15&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;b = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;c = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Schedule&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;hl = Schedule&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;hl += bc : Schedule[(Step - 14) * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack bc = hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xorl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT ^= Schedule[(Step - 14) * 4]&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;a = (Step)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a -= 16&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 15&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;b = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;c = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Schedule&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;hl = Schedule&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;hl += bc : Schedule[(Step - 16) * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack bc = hl&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xorl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT ^= Schedule[(Step - 16) * 4]&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;RollT = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;bc = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roll1&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;StateT = roll1(RollT)&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = Stack+12 = ArgE&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack hl = bc&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;ArgE += StateT&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;a = (Step)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;a &amp;amp;= 15&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;sla&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a *= 2&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;b = 0&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;c = a&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Schedule&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;;hl = Schedule&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;hl += bc : Schedule[Step * 4]&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;Schedule[Step * 4] = StateT&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rien de particulier à dire, le principe est similaire au reste du code qu’on a déjà vu plus haut.&lt;/p&gt;

&lt;h3 id=&quot;round-1-et-3&quot;&gt;Round 1 et 3&lt;/h3&gt;

&lt;p&gt;J’ai regroupé les rounds &lt;strong&gt;1&lt;/strong&gt; et &lt;strong&gt;3&lt;/strong&gt; dans le même chapitre car la seule différence entre les deux c’est la valeur de &lt;strong&gt;K&lt;/strong&gt; (donc l’initialisation).&lt;/p&gt;

&lt;p&gt;Initialisation du round &lt;strong&gt;1&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;initRound1:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;Init RoundK ROUND1 0x6ED9EBA1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RoundK&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = RoundK&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x6E&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;D9&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0xD9&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EB&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0xEB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A1&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0xA1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopRound1:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;round1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loopRound&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initialisation du round &lt;strong&gt;3&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;initRound3:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;Init RoundK ROUND3 0xCA62C1D6&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RoundK&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = RoundK&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CA&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0xCA&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;62&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x62&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C1&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0xC1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;D6&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0xD6&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;loopRound3:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;round3&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;loopRound&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round1&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round3&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;round1:&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;round3:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roundschedule&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+4 = ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT = ArgB&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+6 = ArgC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xorl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT ^= ArgC&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+8 = ArgD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xorl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT ^= ArgD&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roundtail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;round-2&quot;&gt;Round 2&lt;/h3&gt;

&lt;p&gt;Et pour terminer, le round &lt;strong&gt;2&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;round2:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roundschedule&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+6 = ArgC&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT = ArgC&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;bc = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;movl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;RollT = StateT&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+8 = ArgD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;Stack bc : ArgD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;orl&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;StateT |= ArgD&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;UnStack bc = ArgD&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;andl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;RollT &amp;amp;= ArgD&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;hl = Stack+4 = ArgB&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;c = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;b = (hl)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;andl&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;StateT &amp;amp;= ArgB&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RollT&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;bc = RollT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;StateT&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;;hl = StateT&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;orl&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;StateT |= RollT&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;jp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;roundtail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ici j’utilise &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RollT&lt;/code&gt; comme variable temporaire en plus de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt;. Au final le nom de ces deux variables n’a pas réellement d’importance ;)&lt;/p&gt;

&lt;h3 id=&quot;construction-de-la-chaine-à-hacher-blocs-sha1&quot;&gt;Construction de la chaine à hacher (blocs SHA1)&lt;/h3&gt;

&lt;p&gt;Comme vaguement évoqué dans le chapitre sur l’initialisation SHA1, cet algorithme utilise des blocs de &lt;strong&gt;64 octets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pour le moment je n’ai pas implémenté la génération des blocs, c’est donc une évolution future tout à fait envisageable !&lt;/p&gt;

&lt;p&gt;En attendant, afin de tester correctement le calcul du SHA1, j’ai fait un petit script python afin de générer les blocs :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
Usage : build-blocks.py [OPTIONS] &amp;lt;source&amp;gt;

Options :
-f  Source as file
-o  Output format (raw,hex,base64), default : hex
&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'unicode_escape'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b2a_hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;base64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b2a_base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:],&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o:fh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetoptError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;isFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hex&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;isFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;base64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BytesIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sourcelen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sourcelen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sourcelen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x80&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blocklen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcelen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sourcelen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blocklen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourcelen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sourcelen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocklen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ce script permet donc de générer les blocs (1 par ligne) pour le message passé en argument (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt;), ou via le contenu d’un fichier en précisant l’option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;.&lt;br /&gt;
L’option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-o&lt;/code&gt; permet également de définir le format de sortie, à savoir :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raw&lt;/code&gt; : Données brutes &lt;strong&gt;Attention cependant aux retours à la ligne, un bloc doit faire 64 octets même si il contient des retours à la ligne&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hex&lt;/code&gt; : Données en hexadécimal&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; : Données en base64&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On peut désormais insérer ces blocs dans le code assembleur, voici un exemple pour le message &lt;strong&gt;test&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;;Message : test&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;Init Block 1&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;Data (64 bytes) = test + \x80 + \x00*58 + \x20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Bl&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ock&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;;hl = Block&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x74&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x65&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x73&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x74&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x80&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;b = 58&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;a = 0&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;initblock1:&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;;b -= 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;jr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;initblock1&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;;Si b &amp;gt; 0 : Jump initblock1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ld&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;;a = 0x20&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;ldi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;;(hl) = a, hl += 1&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sha1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Après avoir inséré le bloc dans la variable bloc on appel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1&lt;/code&gt; pour exécuter les calculs.&lt;/p&gt;

&lt;p&gt;Dans le cas où on a plusieurs blocs, il faut quand même appeler &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1&lt;/code&gt; sur le premier bloc puis appeler &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha1next&lt;/code&gt; à la place pour les prochains blocs !&lt;/p&gt;

&lt;h3 id=&quot;récupération-du-hash&quot;&gt;Récupération du hash&lt;/h3&gt;

&lt;p&gt;Comme indiqué dans le chapitre sur l’espace mémoire nécessaire, le hash est stocké dans les variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateA&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Le 20 octets de ces 5 variables cumulées correspondent au hash et sont accessibles de l’adresse mémoire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C001&lt;/code&gt; à &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C014&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ce projet a été un challenge très intéressant pour moi. J’ai pris beaucoup de plaisir à découvrir une partie des possibilités qu’offre la GameBoy.&lt;/p&gt;

&lt;p&gt;Il y a encore pas mal d’optimisations/évolutions possibles pour ce projet et je n’exclus pas une éventuelle seconde partie à cet article !&lt;/p&gt;

&lt;p&gt;Un grand merci à &lt;a href=&quot;https://entropyqueen.github.io/&quot; target=&quot;_blank&quot;&gt;entropyQueen&lt;/a&gt; pour m’avoir motivé (sans le vouloir ^^) à me lancer dans ce projet.&lt;/p&gt;

&lt;h2 id=&quot;sources-et-inspirations&quot;&gt;Sources et inspirations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Elrindel/SHA1-GameBoy&quot; target=&quot;_blank&quot;&gt;Code du projet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;specifications-gameboy&quot; target=&quot;_blank&quot;&gt;Spécifications GameBoy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://entropyqueen.github.io/&quot; target=&quot;_blank&quot;&gt;Blog d’entropyQueen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://furrtek.free.fr/?a=gbasm&quot; target=&quot;_blank&quot;&gt;Article de Furrtek&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nayuki.io/page/fast-sha1-hash-implementation-in-x86-assembly&quot; target=&quot;_blank&quot;&gt;Source SHA1 en C et assembleur x86&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 22 Apr 2020 22:43:30 +0200</pubDate>
        <link>https://elrindel.github.io/implementation-sha1-sur-gameboy</link>
        <guid isPermaLink="true">https://elrindel.github.io/implementation-sha1-sur-gameboy</guid>
        
        
        <category>gameboy</category>
        
      </item>
    
  </channel>
</rss>